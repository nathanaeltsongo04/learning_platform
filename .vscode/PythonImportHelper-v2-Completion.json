[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "transaction",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "InvalidOperation",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "cache_control",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0001_initial",
        "description": "eScholar.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='CompteUtilisateur',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "eScholar.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0002_sous_chapitre_titre",
        "description": "eScholar.migrations.0002_sous_chapitre_titre",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='sous_chapitre',\n            name='titre',\n            field=models.CharField(default=1, max_length=255),\n            preserve_default=False,",
        "detail": "eScholar.migrations.0002_sous_chapitre_titre",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0003_auto_20240813_1140",
        "description": "eScholar.migrations.0003_auto_20240813_1140",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0002_sous_chapitre_titre'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='questionnaire',\n            name='formation',\n        ),\n        migrations.AddField(",
        "detail": "eScholar.migrations.0003_auto_20240813_1140",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0004_questionnaire_maxima",
        "description": "eScholar.migrations.0004_questionnaire_maxima",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0003_auto_20240813_1140'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='questionnaire',\n            name='maxima',\n            field=models.IntegerField(default=10),\n            preserve_default=False,",
        "detail": "eScholar.migrations.0004_questionnaire_maxima",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0005_remove_chapitre_description",
        "description": "eScholar.migrations.0005_remove_chapitre_description",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0004_questionnaire_maxima'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='chapitre',\n            name='description',\n        ),\n    ]",
        "detail": "eScholar.migrations.0005_remove_chapitre_description",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0006_auto_20240813_1316",
        "description": "eScholar.migrations.0006_auto_20240813_1316",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0005_remove_chapitre_description'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='chapitre',\n            name='sous_chapitre',\n        ),\n        migrations.CreateModel(",
        "detail": "eScholar.migrations.0006_auto_20240813_1316",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0007_reponses_alternatives",
        "description": "eScholar.migrations.0007_reponses_alternatives",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0006_auto_20240813_1316'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Reponses_alternatives',\n            fields=[\n                ('code', models.AutoField(primary_key=True, serialize=False)),\n                ('reponse_alternative', models.CharField(max_length=255)),",
        "detail": "eScholar.migrations.0007_reponses_alternatives",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0008_test_reponse_alternative",
        "description": "eScholar.migrations.0008_test_reponse_alternative",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0007_reponses_alternatives'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='test',\n            name='reponse_alternative',\n            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='eScholar.reponses_alternatives'),\n            preserve_default=False,",
        "detail": "eScholar.migrations.0008_test_reponse_alternative",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0009_apprenant_email_alter_inscription_modalite_and_more",
        "description": "eScholar.migrations.0009_apprenant_email_alter_inscription_modalite_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0008_test_reponse_alternative'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='apprenant',\n            name='email',\n            field=models.EmailField(default=1, max_length=254),\n            preserve_default=False,",
        "detail": "eScholar.migrations.0009_apprenant_email_alter_inscription_modalite_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0010_alter_inscription_date_inscription",
        "description": "eScholar.migrations.0010_alter_inscription_date_inscription",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0009_apprenant_email_alter_inscription_modalite_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='inscription',\n            name='date_inscription',\n            field=models.DateField(auto_now=True),\n        ),",
        "detail": "eScholar.migrations.0010_alter_inscription_date_inscription",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0011_remove_test_questionnaire_remove_test_reponse_and_more",
        "description": "eScholar.migrations.0011_remove_test_questionnaire_remove_test_reponse_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0010_alter_inscription_date_inscription'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='test',\n            name='questionnaire',\n        ),\n        migrations.RemoveField(",
        "detail": "eScholar.migrations.0011_remove_test_questionnaire_remove_test_reponse_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0012_alter_interrogation_enseignant",
        "description": "eScholar.migrations.0012_alter_interrogation_enseignant",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0011_remove_test_questionnaire_remove_test_reponse_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='interrogation',\n            name='enseignant',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='eScholar.enseignant'),\n        ),",
        "detail": "eScholar.migrations.0012_alter_interrogation_enseignant",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0013_questioninterrogation_maxima_and_more",
        "description": "eScholar.migrations.0013_questioninterrogation_maxima_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0012_alter_interrogation_enseignant'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='questioninterrogation',\n            name='maxima',\n            field=models.IntegerField(default=1),\n            preserve_default=False,",
        "detail": "eScholar.migrations.0013_questioninterrogation_maxima_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0014_reponsesalternativesinterro",
        "description": "eScholar.migrations.0014_reponsesalternativesinterro",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0013_questioninterrogation_maxima_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ReponsesAlternativesInterro',\n            fields=[\n                ('code', models.AutoField(primary_key=True, serialize=False)),\n                ('reponse_alternative', models.CharField(max_length=255)),",
        "detail": "eScholar.migrations.0014_reponsesalternativesinterro",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0015_remove_interrogation_module_interrogation_formation",
        "description": "eScholar.migrations.0015_remove_interrogation_module_interrogation_formation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0014_reponsesalternativesinterro'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='interrogation',\n            name='module',\n        ),\n        migrations.AddField(",
        "detail": "eScholar.migrations.0015_remove_interrogation_module_interrogation_formation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0016_alter_participation_cote_obtenu",
        "description": "eScholar.migrations.0016_alter_participation_cote_obtenu",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0015_remove_interrogation_module_interrogation_formation'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='participation',\n            name='cote_obtenu',\n            field=models.IntegerField(),\n        ),",
        "detail": "eScholar.migrations.0016_alter_participation_cote_obtenu",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0017_conversation_message",
        "description": "eScholar.migrations.0017_conversation_message",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0016_alter_participation_cote_obtenu'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Conversation',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('created_at', models.DateTimeField(auto_now_add=True)),",
        "detail": "eScholar.migrations.0017_conversation_message",
        "documentation": {}
    },
    {
        "label": "TabClient",
        "kind": 6,
        "importPath": "eScholar.admin",
        "description": "eScholar.admin",
        "peekOfCode": "class TabClient(admin.ModelAdmin):\n    list_display=['last_name','first_name','username','email','password']",
        "detail": "eScholar.admin",
        "documentation": {}
    },
    {
        "label": "EscholarConfig",
        "kind": 6,
        "importPath": "eScholar.apps",
        "description": "eScholar.apps",
        "peekOfCode": "class EscholarConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'eScholar'\n    def ready(self):\n        import eScholar.signals",
        "detail": "eScholar.apps",
        "documentation": {}
    },
    {
        "label": "Niveau",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Niveau(models.Model):\n    code = models.AutoField(primary_key=True)\n    designation = models.CharField(max_length=25)\n    class Meta:\n        db_table='Niveau'\nclass Domaine(models.Model):\n    code =models.AutoField(primary_key=True)\n    designation=models.CharField(max_length=50)\n    class Meta:\n        db_table='Domaine'",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Domaine",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Domaine(models.Model):\n    code =models.AutoField(primary_key=True)\n    designation=models.CharField(max_length=50)\n    class Meta:\n        db_table='Domaine'\nclass Apprenant(models.Model):\n    matricule=models.CharField(max_length=25, primary_key=True)\n    nom=models.CharField(max_length=25)\n    postnom=models.CharField(max_length=25)\n    prenom=models.CharField(max_length=25)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Apprenant",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Apprenant(models.Model):\n    matricule=models.CharField(max_length=25, primary_key=True)\n    nom=models.CharField(max_length=25)\n    postnom=models.CharField(max_length=25)\n    prenom=models.CharField(max_length=25)\n    genre=models.CharField(max_length=1)\n    etatcivil=models.CharField(max_length=25)\n    addresse=models.CharField(max_length=50)\n    contact=models.CharField(max_length=15)\n    email = models.EmailField(max_length=254)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Enseignant",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Enseignant(models.Model):\n    matricule=models.CharField(max_length=25, primary_key=True)\n    nom=models.CharField(max_length=25)\n    postnom=models.CharField(max_length=25)\n    prenom=models.CharField(max_length=25)\n    genre=models.CharField(max_length=1)\n    etatcivil=models.CharField(max_length=25)\n    addresse=models.CharField(max_length=50)\n    contact=models.CharField(max_length=15)\n    profession=models.CharField(max_length=50)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "TypeRessource",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class TypeRessource(models.Model):\n    code=models.AutoField(primary_key=True)\n    designation=models.CharField(max_length=25)\n    class Meta:\n        db_table='TypeRessource'\nclass Ressource(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=25)\n    description=models.TextField()\n    contenu=models.FileField(upload_to=\"Ressource/\", max_length=500)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Ressource",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Ressource(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=25)\n    description=models.TextField()\n    contenu=models.FileField(upload_to=\"Ressource/\", max_length=500)\n    type_ressource=models.ForeignKey(TypeRessource,on_delete=models.CASCADE)\n    class Meta:\n        db_table='Ressource'\nclass Sous_chapitre(models.Model):\n    code=models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Sous_chapitre",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Sous_chapitre(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre = models.CharField(max_length=255)\n    contenu=models.TextField()\n    class Meta:\n        db_table='Sous_chapitre'\nclass Chapitre(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre = models.CharField(max_length=255)\n    class Meta:",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Chapitre",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Chapitre(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre = models.CharField(max_length=255)\n    class Meta:\n        db_table='Chapitre'\nclass ContenuChapitre(models.Model):\n    code = models.AutoField(primary_key=True)\n    chapitre = models.ForeignKey(Chapitre, on_delete=models.CASCADE)\n    sous_chapitre=models.ForeignKey(Sous_chapitre, on_delete=models.CASCADE)\n    class Meta:",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "ContenuChapitre",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class ContenuChapitre(models.Model):\n    code = models.AutoField(primary_key=True)\n    chapitre = models.ForeignKey(Chapitre, on_delete=models.CASCADE)\n    sous_chapitre=models.ForeignKey(Sous_chapitre, on_delete=models.CASCADE)\n    class Meta:\n        db_table='ContenuChapitre'\nclass Module(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=25)\n    description=models.TextField()",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Module(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=25)\n    description=models.TextField()\n    prix=models.DecimalField(max_digits=10, decimal_places=2)\n    niveau=models.ForeignKey(Niveau,on_delete=models.CASCADE)\n    chapitre=models.ForeignKey(Chapitre, on_delete=models.CASCADE)\n    ressource=models.ForeignKey(Ressource,on_delete=models.CASCADE, null=True)\n    class Meta:\n        db_table='Module'",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Formation",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Formation(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=50)\n    description = models.TextField ()\n    duree=models.CharField(max_length = 20)\n    date_debut=models.DateField()\n    date_fin=models.DateField()\n    domaine = models.ForeignKey(Domaine, on_delete=models.CASCADE)\n    module = models.ForeignKey(Module, on_delete=models.CASCADE)\n    enseignant=models.ForeignKey(Enseignant, on_delete=models.CASCADE)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "ModalitePaie",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class ModalitePaie(models.Model):\n    code=models.AutoField(primary_key=True)\n    tranche=models.CharField(max_length=25)\n    montant_fixe=models.DecimalField(max_digits=10,decimal_places=2)\n    module=models.ForeignKey(Module,on_delete=models.CASCADE)\n    class Meta:\n        db_table='ModalitePaie'\nclass Inscription(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Inscription",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Inscription(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)\n    formation=models.ForeignKey(Formation,on_delete=models.CASCADE, null=True)\n    modalite=models.ForeignKey(ModalitePaie,on_delete=models.CASCADE, null=True)\n    date_inscription=models.DateField(auto_now=True)\n    class Meta:\n        db_table='Inscription'\nclass CompteUtilisateur(AbstractUser):\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE, null=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "CompteUtilisateur",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class CompteUtilisateur(AbstractUser):\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE, null=True)\n    enseignant=models.ForeignKey(Enseignant,on_delete=models.CASCADE, null = True)\nclass Publication(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=255)\n    description=models.TextField()\n    user=models.ForeignKey(CompteUtilisateur,on_delete=models.CASCADE)\n    image=models.ImageField(upload_to='publication/', blank=True)\n    date_publication=models.DateTimeField(auto_now_add=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Publication",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Publication(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=255)\n    description=models.TextField()\n    user=models.ForeignKey(CompteUtilisateur,on_delete=models.CASCADE)\n    image=models.ImageField(upload_to='publication/', blank=True)\n    date_publication=models.DateTimeField(auto_now_add=True)\n    def total_likes(self):\n        return self.likes.count()\n    class Meta:",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Like",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Like(models.Model):\n    id = models.AutoField(primary_key=True)\n    publication = models.ForeignKey(Publication, related_name='likes', on_delete=models.CASCADE)\n    user = models.ForeignKey(CompteUtilisateur, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = 'Like'\nclass Commentaire(models.Model):\n    id = models.AutoField(primary_key=True)\n    publication = models.ForeignKey(Publication, related_name='comments', on_delete=models.CASCADE)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Commentaire",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Commentaire(models.Model):\n    id = models.AutoField(primary_key=True)\n    publication = models.ForeignKey(Publication, related_name='comments', on_delete=models.CASCADE)\n    user = models.ForeignKey(CompteUtilisateur, on_delete=models.CASCADE)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = 'Commentaire'\nclass Paiement(models.Model):\n    code=models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Paiement",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Paiement(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)\n    module=models.ForeignKey(Module,on_delete=models.CASCADE)\n    montant=models.DecimalField(max_digits=10,decimal_places=2)\n    date_paiement=models.DateTimeField()\n    class Meta:\n        db_table='Paiement'\nclass Questionnaire(models.Model):\n    code=models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Questionnaire",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Questionnaire(models.Model):\n    code=models.AutoField(primary_key=True)\n    module=models.ForeignKey(Module, on_delete=models.CASCADE)\n    question=models.TextField()\n    reponse=models.TextField()\n    maxima=models.IntegerField()\n    class Meta:\n        db_table='Questionnaire'\nclass Reponses_alternatives(models.Model):\n    code = models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Reponses_alternatives",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Reponses_alternatives(models.Model):\n    code = models.AutoField(primary_key=True)\n    questionnaire = models.ForeignKey(Questionnaire, on_delete=models.CASCADE)\n    reponse_alternative = models.CharField(max_length=255)\n    class Meta:\n        db_table='Reponses_alternatives'\nclass Test(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)\n    module = models.ForeignKey(Module, on_delete=models.CASCADE)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Test(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)\n    module = models.ForeignKey(Module, on_delete=models.CASCADE)\n    resultat = models.IntegerField()\n    class Meta:\n        db_table='Test'\nclass Interrogation(models.Model):\n    code = models.AutoField(primary_key=True)\n    titre = models.CharField(max_length=150)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Interrogation",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Interrogation(models.Model):\n    code = models.AutoField(primary_key=True)\n    titre = models.CharField(max_length=150)\n    date_interro = models.DateField(auto_now=False, auto_now_add=False)\n    duree = models.TimeField(auto_now=False, auto_now_add=False)\n    formation = models.ForeignKey(Formation, on_delete=models.CASCADE)\n    enseignant = models.ForeignKey(Enseignant, on_delete=models.CASCADE)\n    class Meta:\n        db_table = 'Interrogation'\nclass QuestionInterrogation(models.Model):",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "QuestionInterrogation",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class QuestionInterrogation(models.Model):\n    code = models.AutoField(primary_key=True)\n    enonce=models.TextField()\n    reponse=models.TextField()\n    maxima = models.IntegerField()\n    interrogation = models.ForeignKey(Interrogation, on_delete=models.CASCADE)\n    class Meta:\n        db_table = 'QuestionInterrogation'\nclass Participation(models.Model):\n    code = models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Participation",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Participation(models.Model):\n    code = models.AutoField(primary_key=True)\n    date_participation = models.DateField(auto_now=False, auto_now_add=False)\n    cote_obtenu = models.IntegerField()\n    apprenant = models.ForeignKey(Apprenant, on_delete=models.CASCADE)\n    interrogation = models.ForeignKey(Interrogation, on_delete=models.CASCADE)\n    class Meta:\n        db_table = 'Participation'\nclass ReponseInterrogation(models.Model):\n    code = models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "ReponseInterrogation",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class ReponseInterrogation(models.Model):\n    code = models.AutoField(primary_key=True)\n    texte = models.TextField()\n    question = models.ForeignKey(QuestionInterrogation, on_delete=models.CASCADE)\n    class Meta:\n        db_table = 'ReponseInterrogation'\nclass ReponsesAlternativesInterro(models.Model):\n    code = models.AutoField(primary_key=True)\n    question = models.ForeignKey(QuestionInterrogation, on_delete=models.CASCADE)\n    reponse_alternative = models.CharField(max_length=255)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "ReponsesAlternativesInterro",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class ReponsesAlternativesInterro(models.Model):\n    code = models.AutoField(primary_key=True)\n    question = models.ForeignKey(QuestionInterrogation, on_delete=models.CASCADE)\n    reponse_alternative = models.CharField(max_length=255)\n    class Meta:\n        db_table='ReponsesAlternativesInterro'\nclass Evaluation(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant, on_delete=models.CASCADE, null=True)\n    formation=models.ForeignKey(Formation,on_delete=models.CASCADE)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Evaluation",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Evaluation(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant, on_delete=models.CASCADE, null=True)\n    formation=models.ForeignKey(Formation,on_delete=models.CASCADE)\n    maximum=models.DecimalField(max_digits=10,decimal_places=1)\n    cote=models.DecimalField(max_digits=10,decimal_places=1)\n    date_evaluation=models.DateTimeField()\n    class Meta:\n        db_table='Evaluation'\nclass Conversation(models.Model):",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Conversation",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Conversation(models.Model):\n    apprenant = models.ForeignKey(CompteUtilisateur, on_delete=models.CASCADE, related_name='conversations_as_apprenant', null=True)\n    enseignant = models.ForeignKey(CompteUtilisateur, on_delete=models.CASCADE, related_name='conversations_as_enseignant', null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = 'Conversation'\n    def __str__(self):\n        return f\"Conversation between {self.apprenant} and {self.enseignant}\"\nclass Message(models.Model):\n    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, related_name='messages')",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Message(models.Model):\n    conversation = models.ForeignKey(Conversation, on_delete=models.CASCADE, related_name='messages')\n    sender = models.ForeignKey(CompteUtilisateur, on_delete=models.CASCADE)\n    content = models.TextField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = 'Message'\n    def __str__(self):\n        return f\"Message from {self.sender} at {self.timestamp}\"",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "envoyer_matricule_par_email",
        "kind": 2,
        "importPath": "eScholar.signals",
        "description": "eScholar.signals",
        "peekOfCode": "def envoyer_matricule_par_email(sender, instance, created, **kwargs):\n    if created and instance.email:\n        sujet = 'Votre Matricule'\n        message = f'Bonjour {instance.prenom} {instance.postnom},\\n\\n Merci de vous etre enregistré(e) sur notre plateforme. Voici maintenant Votre matricule : {instance.matricule}. \\n Utilisez-le pour creer un compte dans notre plateforme !\\n\\n Merci beaucoup !'\n        destinataire = [instance.email]\n        send_mail(\n            sujet,\n            message,\n            settings.EMAIL_HOST_USER,\n            destinataire,",
        "detail": "eScholar.signals",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "eScholar.urls",
        "description": "eScholar.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.index, name='home'),\n    path('authentification', views.authentification, name='authentification'),\n    path('rediriger_utilisateur', views.rediriger_utilisateur, name='rediriger_utilisateur'),\n    path('creer_compte', views.creer_compte, name='creation_compte_utilisateur'),\n    path('logout', views.logout_view, name='logout'),\n    path('logged_out', views.logged_out, name='logged_out'),\n    path('profile', views.profile, name='profile'),\n#=========================================================================================================\n# ADMINISTRATEUR",
        "detail": "eScholar.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def index(request):\n    if request.method == \"POST\":\n        nom = request.POST.get(\"nom\")\n        postnom = request.POST.get(\"postnom\")\n        prenom = request.POST.get(\"prenom\")\n        genre = request.POST.get(\"genre\")\n        etatcivil = request.POST.get(\"etatcivil\")\n        addresse = request.POST.get(\"addresse\")\n        email = request.POST.get(\"email\")\n        contact = request.POST.get(\"contact\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "video_conference",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def video_conference(request):\n    return render(request, 'video_conference.html')\ndef liste_formation(request):\n    formation = Formation.objects.all()\n    context = {'formations':formation}\n    return render(request, 'formation.html', context)\ndef profile(request):\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        user = CompteUtilisateur.objects.get(id = request.user.id)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "liste_formation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def liste_formation(request):\n    formation = Formation.objects.all()\n    context = {'formations':formation}\n    return render(request, 'formation.html', context)\ndef profile(request):\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        user = CompteUtilisateur.objects.get(id = request.user.id)\n        context = {'user':user, 'formations':formations}\n    except Exception as e:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "profile",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def profile(request):\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        user = CompteUtilisateur.objects.get(id = request.user.id)\n        context = {'user':user, 'formations':formations}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, 'profile.html', context)\ndef interrogation_enseignant(request):\n    render(request,'enseignant/interrogation.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "interrogation_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def interrogation_enseignant(request):\n    render(request,'enseignant/interrogation.html')\ndef dashboard_apprenant(request):\n    context = {}\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        publications = Publication.objects.all().order_by('-date_publication')\n        context = {\n            'publications': publications,\n            'formations':formations",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "dashboard_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def dashboard_apprenant(request):\n    context = {}\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        publications = Publication.objects.all().order_by('-date_publication')\n        context = {\n            'publications': publications,\n            'formations':formations\n            }\n    except Exception as e:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "formation_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def formation_apprenant(request):\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        context = {'formations':formations}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, 'partials/learner_sidebar.html', context)\ndef contenu_formation(request, code):\n    try:\n        type = TypeRessource.objects.all()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "contenu_formation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def contenu_formation(request, code):\n    try:\n        type = TypeRessource.objects.all()\n        ressource = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        contenus = Formation.objects.get(code = code)\n        contenu_chapitre = ContenuChapitre.objects.filter(chapitre__titre = contenus.module.chapitre.titre)\n        context = {'ressources': ressource, 'types': type, 'contenus':contenus, 'formations':formations, 'contenu_chapitres':contenu_chapitre}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "interrogations_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def interrogations_apprenant(request):\n    try:\n        # Étape 1: Récupérer l'apprenant connecté et ses inscriptions\n        apprenant = request.user.apprenant\n        inscriptions = Inscription.objects.filter(apprenant=apprenant)\n        # Étape 2: Récupérer les formations liées aux inscriptions de l'apprenant\n        formations = [inscription.formation for inscription in inscriptions]\n        # Étape 3: Filtrer les interrogations en fonction des formations de l'apprenant\n        interrogations = Interrogation.objects.filter(formation__in=formations)\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "voirInterro",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def voirInterro(request, code, question_index=0):\n    # try:\n        # Récupérer l'interrogation spécifique\n        interrogation = get_object_or_404(Interrogation, code=code)\n        # Récupérer toutes les questions de cette interrogation\n        questions = QuestionInterrogation.objects.filter(interrogation=interrogation)\n        # Vérifier si toutes les questions ont été répondues\n        if question_index >= questions.count():\n            # Rediriger vers une page de résultats ou de succès après la fin de l'interrogation\n            return redirect('evaluation_apprenant')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "passerInterro",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def passerInterro(request):\n    try:\n        if request.method == \"POST\":\n            pass\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"apprenant/repondre_questions_interro.html\")\ndef horaire_apprenant(request):\n    return render(request, 'apprenant/horaire.html')\ndef formation_enseignant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "horaire_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def horaire_apprenant(request):\n    return render(request, 'apprenant/horaire.html')\ndef formation_enseignant(request):\n    try:\n        user = request.user\n        formation = Formation.objects.filter(enseignant = user.enseignant)\n        context = {'formations':formation}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str:e} \\n Actualisez la page !\")\n    return render(request,'enseignant/formation.html', context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "formation_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def formation_enseignant(request):\n    try:\n        user = request.user\n        formation = Formation.objects.filter(enseignant = user.enseignant)\n        context = {'formations':formation}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str:e} \\n Actualisez la page !\")\n    return render(request,'enseignant/formation.html', context)\ndef cote_enseignant(request):\n    return render(request, 'enseignant/cote.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "cote_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def cote_enseignant(request):\n    return render(request, 'enseignant/cote.html')\ndef correction_enseignant(request):\n    return render(request, 'enseignant/correction.html')\ndef dashboard_enseignant(request):\n    try:\n        ressources = Ressource.objects.all()\n        total_ressources = ressources.count()\n        total_publications = Publication.objects.all().count()\n        total_modules = Module.objects.all().count()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "correction_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def correction_enseignant(request):\n    return render(request, 'enseignant/correction.html')\ndef dashboard_enseignant(request):\n    try:\n        ressources = Ressource.objects.all()\n        total_ressources = ressources.count()\n        total_publications = Publication.objects.all().count()\n        total_modules = Module.objects.all().count()\n        context = {\n            'ressources': ressources, ",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "dashboard_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def dashboard_enseignant(request):\n    try:\n        ressources = Ressource.objects.all()\n        total_ressources = ressources.count()\n        total_publications = Publication.objects.all().count()\n        total_modules = Module.objects.all().count()\n        context = {\n            'ressources': ressources, \n            'total_ressources': total_ressources,\n            'total_publications': total_publications,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "publication_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def publication_enseignant(request):\n    context = {}\n    try:\n        publications = Publication.objects.all().order_by('-date_publication')\n        context = {\n            'publications': publications\n            }\n    except Exception as e:\n                messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, 'enseignant/publication.html', context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "authentification",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def authentification(request):\n    try:\n        if request.method == \"POST\":\n            username = request.POST.get(\"nomdutilisateur\")\n            password = request.POST.get(\"password\")\n            # Authentification de l'utilisateur\n            user = authenticate(request, username=username, password=password)\n            if user is not None:\n                login(request, user)  \n                return redirect('rediriger_utilisateur')  # Redirige vers la page d'accueil ou une autre page sécurisée",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "creer_compte",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def creer_compte(request):\n    try:\n        if request.method == \"POST\":\n            matricule = request.POST.get(\"matricule\")\n            username = request.POST.get(\"nomdutilisateur\")\n            password = request.POST.get(\"password\")\n            confirmpassword = request.POST.get(\"confirmpassword\")\n            # Vérification si le matricule ou le nom d'utilisateur existe déjà\n            if CompteUtilisateur.objects.filter(enseignant=matricule).exists() or CompteUtilisateur.objects.filter(apprenant=matricule).exists():\n                messages.warning(request, \"Ce Matricule a déjà un compte !\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect('logged_out')\n@cache_control(no_cache=True, must_revalidate=True, no_store=True)\ndef logged_out(request):\n    return render(request, 'authentification.html')\n@login_required\ndef dashboard_admin(request):\n    try:\n        apprenants = Apprenant.objects.all()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "logged_out",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def logged_out(request):\n    return render(request, 'authentification.html')\n@login_required\ndef dashboard_admin(request):\n    try:\n        apprenants = Apprenant.objects.all()\n        total_apprenants = apprenants.count()\n        total_enseignants = Enseignant.objects.all().count()\n        total_formations = Formation.objects.all().count()\n        context = {",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "dashboard_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def dashboard_admin(request):\n    try:\n        apprenants = Apprenant.objects.all()\n        total_apprenants = apprenants.count()\n        total_enseignants = Enseignant.objects.all().count()\n        total_formations = Formation.objects.all().count()\n        context = {\n            'apprenants': apprenants, \n            'total_apprenants': total_apprenants,\n            'total_enseignants': total_enseignants,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "domaine_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def domaine_admin(request):\n    try:\n        domaine = Domaine.objects.all()\n        context = {'domaines':domaine}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'admin/domaine.html', context)\ndef modalitepaiement(request):\n    try:\n      modalite = ModalitePaie.objects.all()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "modalitepaiement",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def modalitepaiement(request):\n    try:\n      modalite = ModalitePaie.objects.all()\n      module = Module.objects.all()\n      context = {'modalitepaies':modalite, 'modules':module}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'admin/modalitepaiement.html', context)\ndef niveau(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "niveau",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def niveau(request):\n    try:\n        niveau = Niveau.objects.all()\n        context = {'niveaux':niveau}\n    except Exception as e:\n        messages.error(\"Une erreur s'est produite lors de l'exécution \\n Actualisez la page !\")\n    return render(request,'admin/niveau.html',context)\ndef paiement(request):\n    try:\n        paiement = Paiement.objects.all()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "paiement",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def paiement(request):\n    try:\n        paiement = Paiement.objects.all()\n        apprenant = Apprenant.objects.all()\n        module = Module.objects.all()\n        context = {'paiements':paiement, 'apprenants':apprenant, 'modules':module}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        return redirect('paiement')\n    return render(request,'admin/paiement.html', context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "typeressource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def typeressource(request):\n    try:\n        type = TypeRessource.objects.all()\n        context = {'types':type}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        # return redirect('inscription_admin')\n    return render(request,'enseignant/typeressource.html', context)\n# =======================================================================================================\n# NIVEAU",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertNiveau",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertNiveau(request):\n    try:\n      if request.method == \"POST\":\n        designation = request.POST.get(\"designation\")\n        if Niveau.objects.filter(designation = designation.capitalize()):\n            messages.warning(request, \"Cette information existe déjà !\")\n            return redirect('niveau_admin')\n        else:\n            Niveau.objects.create(\n                designation = designation.capitalize()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateNiveau",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateNiveau(request):\n    try:\n      if request.method == \"POST\":\n        code = request.POST.get(\"code\")\n        designation = request.POST.get(\"designation\")\n        if Niveau.objects.filter(designation = designation.capitalize()):\n            messages.warning(request, \"Cette information existe déjà !\")\n            return redirect('niveau_admin')\n        else:\n            Niveau(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertDomaine",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertDomaine(request):\n    try:\n      if request.method == \"POST\":\n        designation = request.POST.get(\"designation\")\n        if Domaine.objects.filter(designation = designation.capitalize()):\n            messages.warning(request, \"Cette information existe déjà !\")\n        else:\n            Domaine.objects.create(\n                designation = designation.capitalize()\n            )",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateDomaine",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateDomaine(request):\n    try:\n      if request.method == \"POST\":\n        code = request.POST.get(\"code\")\n        designation = request.POST.get(\"designation\")\n        if Domaine.objects.filter(designation = designation.capitalize()):\n            messages.error(request, \"Cette information existe déjà !\")\n        else:\n            Domaine(\n                code = code,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "apprenant_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def apprenant_admin(request):\n    try:\n      apprenant = Apprenant.objects.all()\n      context = {'apprenants':apprenant}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'admin/apprenant.html', context)\ndef generer_matricule_apprenant():\n        # Récupérer le dernier matricule pour déterminer le prochain\n        dernier_etudiant = Apprenant.objects.last()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "generer_matricule_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def generer_matricule_apprenant():\n        # Récupérer le dernier matricule pour déterminer le prochain\n        dernier_etudiant = Apprenant.objects.last()\n        if dernier_etudiant:\n            dernier_numero = int(dernier_etudiant.matricule[3:])  # Extrait le numéro après \"ETU\"\n        else:\n            dernier_numero = 0\n        prochain_numero = dernier_numero + 1\n        return f\"ETU{prochain_numero:04d}\"\ndef insertApprenant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertApprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertApprenant(request):\n    try:\n      if request.method == \"POST\":\n        nom = request.POST.get(\"nom\")\n        postnom = request.POST.get(\"postnom\")\n        prenom = request.POST.get(\"prenom\")\n        genre = request.POST.get(\"genre\")\n        etatcivil = request.POST.get(\"etatcivil\")\n        addresse = request.POST.get(\"addresse\")\n        email = request.POST.get(\"email\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateApprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateApprenant(request):\n    try:\n      if request.method == \"POST\":\n        matricule = request.POST.get(\"matricule\")\n        nom = request.POST.get(\"nom\")\n        postnom = request.POST.get(\"postnom\")\n        prenom = request.POST.get(\"prenom\")\n        genre = request.POST.get(\"genre\")\n        etatcivil = request.POST.get(\"etatcivil\")\n        addresse = request.POST.get(\"addresse\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "enseignant_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def enseignant_admin(request):\n    try:\n      enseignant = Enseignant.objects.all()\n      context = {'enseignants':enseignant}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n      return redirect('apprenant_admin')\n    return render(request,'admin/enseignant.html', context)\ndef generer_matricule_enseignant():\n    # Récupérer le dernier matricule pour déterminer le prochain",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "generer_matricule_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def generer_matricule_enseignant():\n    # Récupérer le dernier matricule pour déterminer le prochain\n    dernier_enseignant = Enseignant.objects.last()\n    if dernier_enseignant:\n        dernier_numero = int(dernier_enseignant.matricule[3:])  # Extrait le numéro après \"ETU\"\n    else:\n        dernier_numero = 0\n    prochain_numero = dernier_numero + 1\n    return f\"ENS{prochain_numero:04d}\"\ndef insertEnseignant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertEnseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertEnseignant(request):\n    try:\n      if request.method == \"POST\":\n        nom = request.POST.get(\"nom\")\n        postnom = request.POST.get(\"postnom\")\n        prenom = request.POST.get(\"prenom\")\n        genre = request.POST.get(\"genre\")\n        etatcivil = request.POST.get(\"etatcivil\")\n        addresse = request.POST.get(\"addresse\")\n        contact = request.POST.get(\"contact\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateEnseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateEnseignant(request):\n    try:\n        if request.method == \"POST\":\n            matricule = request.POST.get(\"matricule\")\n            nom = request.POST.get(\"nom\")\n            postnom = request.POST.get(\"postnom\")\n            prenom = request.POST.get(\"prenom\")\n            genre = request.POST.get(\"genre\")\n            etatcivil = request.POST.get(\"etatcivil\")\n            addresse = request.POST.get(\"addresse\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertTypeRessource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertTypeRessource(request):\n    try:\n      if request.method == \"POST\":\n          designation = request.POST.get(\"designation\")\n          if TypeRessource.objects.filter(designation = designation.capitalize()):\n              messages.warning(request, \"Cette information existe déjà !\")\n              return redirect('typeressource')\n          else:\n            TypeRessource.objects.create(\n                designation = designation.capitalize()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateTypeRessource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateTypeRessource(request):\n    try:\n        if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            designation = request.POST.get(\"designation\")\n            if TypeRessource.objects.filter(designation = designation.capitalize()):\n                messages.error(request,\"Cette information existe déjà !\")\n            else:\n                TypeRessource(\n                    code = code,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "ressource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def ressource(request):\n    try:\n        type = TypeRessource.objects.all()\n        ressource = Ressource.objects.all()\n        context = {'ressources':ressource, 'types':type}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, 'enseignant/ressource.html', context)\ndef insertRessource(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertRessource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertRessource(request):\n    try:\n      if request.method == \"POST\":\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          contenu = request.FILES.get(\"contenu\")\n          id_type_ressource = request.POST.get(\"type_ressource\")\n          type_ressource = get_object_or_404(TypeRessource, pk = id_type_ressource)\n          if Ressource.objects.filter(titre = titre.capitalize(), description = description.capitalize()):\n              messages.warning(request,\"Ces informations existent déjà !\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateRessource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateRessource(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          contenu = request.FILES.get(\"contenu\")\n          id_type_ressource = request.POST.get(\"type_ressource\")\n          type_ressource = get_object_or_404(TypeRessource, pk = id_type_ressource)\n          if Ressource.objects.filter(titre = titre.capitalize(), description = description.capitalize(), contenu = contenu):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "download_file",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def download_file(request, code):\n    uploaded_file = get_object_or_404(Ressource, pk=code)\n    file_path = os.path.join(settings.MEDIA_ROOT, uploaded_file.contenu.name)\n    if os.path.exists(file_path):\n        with open(file_path, 'rb') as f:\n            response = HttpResponse(f.read(), content_type='application/pdf')\n            response['Content-Disposition'] = f'attachment; filename={uploaded_file.contenu.name}'\n            return response\n    raise Http404(\"File does not exist\")\n# =======================================================================================================",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "module_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def module_enseignant(request):\n    try:\n        module = Module.objects.all()\n        niveau = Niveau.objects.all()\n        chapitre = Chapitre.objects.all()\n        ressource = Ressource.objects.all()\n        context = {'modules': module, 'niveaux':niveau, 'ressources':ressource, 'chapitres':chapitre}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        return redirect('module_enseignant')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertModule",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertModule(request):\n    if request.method == \"POST\":\n        titre = request.POST.get(\"titre\")\n        description = request.POST.get(\"description\")\n        prix = request.POST.get(\"prix\")\n        id_niveau = request.POST.get(\"niveau\")\n        id_chapitre = request.POST.get(\"chapitre\")\n        id_ressource = request.POST.get(\"ressource\")\n        if not id_niveau or not id_chapitre:\n            messages.error(request, \"Veuillez sélectionner un niveau et un chapitre.\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateModule",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateModule(request):\n    try:\n      if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            titre = request.POST.get(\"titre\")\n            description = request.POST.get(\"description\")\n            prix = request.POST.get(\"prix\")\n            id_niveau = request.POST.get(\"niveau\")\n            id_chapitre = request.POST.get(\"chapitre\")\n            id_ressource = request.POST.get(\"ressource\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "formation_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def formation_admin(request):\n    try:\n      formation = Formation.objects.all()\n      module = Module.objects.all()\n      enseignant = Enseignant.objects.all()\n      domaine = Domaine.objects.all()\n      context = {'formations':formation, 'enseignants':enseignant, 'modules':module, 'domaines':domaine}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        return redirect('formation_admin') ",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertFormation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertFormation(request):\n    try:\n      if request.method == \"POST\":\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          duree = request.POST.get(\"duree\")\n          date_debut = request.POST.get(\"date_debut\")\n          date_fin = request.POST.get(\"date_fin\")\n          id_domaine = request.POST.get(\"domaine\")\n          id_module = request.POST.get(\"module\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateFormation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateFormation(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          duree = request.POST.get(\"duree\")\n          date_debut = request.POST.get(\"date_debut\")\n          date_fin = request.POST.get(\"date_fin\")\n          id_domaine = request.POST.get(\"domaine\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateStatus",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateStatus(request):\n    try:\n        if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            status = request.POST.get(\"status\")\n            formation = get_object_or_404(Formation, pk = code)\n            Formation(\n                code = code,\n                titre = formation.titre,\n                description = formation.description,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertModalitePaie",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertModalitePaie(request):\n    try:\n      if request.method == \"POST\":\n          tranche = request.POST.get(\"tranche\")\n          id_module = request.POST.get(\"module\")\n          module = get_object_or_404(Module, pk = id_module)\n          if tranche == \"Une Tranche\":\n            montant_fixe = module.prix\n          elif tranche == \"Deux Tranches\":\n            montant_fixe = module.prix/2",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateModalitePaie",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateModalitePaie(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          tranche = request.POST.get(\"tranche\")\n          montant_fixe = request.POST.get(\"montant_fixe\")\n          id_module = request.POST.get(\"module\")\n          module = get_object_or_404(Module, pk = id_module)\n          ModalitePaie(\n              code = code,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "inscription_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def inscription_admin(request):\n    try:\n      inscription = Inscription.objects.all()\n      apprenant = Apprenant.objects.all()\n      formation = Formation.objects.all()\n      modalite = ModalitePaie.objects.all()\n      context = {'inscriptions':inscription, 'apprenants':apprenant, 'modalites':modalite, 'formations':formation}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n      return redirect('inscription_admin')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertInscription",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertInscription(request):\n    try:\n      if request.method == \"POST\":\n          id_apprenant = request.POST.get(\"apprenant_matricule\")\n          # id_formation = request.POST.get(\"formation\")\n          id_modalite = request.POST.get(\"modalite\")\n          date_inscription = request.POST.get(\"date_inscription\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          # formation = get_object_or_404(Formation, pk = id_formation)\n          modalite = get_object_or_404(ModalitePaie, pk = id_modalite)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateInscription",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateInscription(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          id_apprenant = request.POST.get(\"apprenant\")\n          id_modalite = request.POST.get(\"modalite\")\n          date_inscription = request.POST.get(\"date_inscription\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          modalite = get_object_or_404(ModalitePaie, pk = id_modalite)\n          Inscription(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "evaluation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def evaluation(request):\n    try:\n        interrogation = Interrogation.objects.all()\n        formation = Formation.objects.all()\n        context = {'interrogations':interrogation, 'modules':formation}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        return redirect('evaluation')    \n    return render(request, \"enseignant/interrogation.html\", context)\ndef insertEvaluation(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertEvaluation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertEvaluation(request):\n    try:\n      if request.method == \"POST\":\n          id_formation = request.POST.get(\"formation\")\n          maximum = request.POST.get(\"maximum\")\n          cote = request.POST.get(\"cote\")\n          date_evaluation = request.POST.get(\"date_evaluation\")\n          formation = get_object_or_404(Formation, pk = id_formation)\n          Evaluation.objects.create(\n              formation = formation,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateEvaluation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateEvaluation(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          id_formation = request.POST.get(\"formation\")\n          maximum = request.POST.get(\"maximum\")\n          cote = request.POST.get(\"cote\")\n          date_evaluation = request.POST.get(\"date_evaluation\")\n          formation = get_object_or_404(Formation, pk = id_formation)\n          Evaluation(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertInterrogation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertInterrogation(request):\n    try:\n        if request.method == \"POST\":\n            titre = request.POST.get(\"titre\")\n            date_interro = request.POST.get(\"date_interro\")\n            duree = request.POST.get(\"duree\")\n            id_module = request.POST.get(\"module\")\n            module = get_object_or_404(Module, code = id_module)\n            Interrogation.objects.create(\n                titre = titre,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateInterrogation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateInterrogation(request):\n    try:\n        if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            titre = request.POST.get(\"titre\")\n            date_interro = request.POST.get(\"date_interro\")\n            duree = request.POST.get(\"duree\")\n            id_module = request.POST.get(\"module\")\n            module = get_object_or_404(Module, code = id_module)\n            Interrogation(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "questionInterro",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def questionInterro(request):\n    try:\n        questions = QuestionInterrogation.objects.all()\n        interrogation = Interrogation.objects.all()\n        context = {'questions':questions, 'interrogations':interrogation}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"enseignant/questions_interro.html\", context)\ndef insertQuestionInterro(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertQuestionInterro",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertQuestionInterro(request):\n    try:\n        if request.method == \"POST\":\n            interrogation_ids = request.POST.getlist('interrogation_code')\n            enonces = request.POST.getlist('enonce')\n            responses = request.POST.getlist('reponse')\n            maxima = request.POST.getlist('maxima')\n            for i in range(len(enonces)):\n                QuestionInterrogation.objects.create(\n                    interrogation_id=interrogation_ids[i],",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateQuestionInterro",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateQuestionInterro(request):\n    try:\n        if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            interrogation_id = request.POST.get('interrogation_code')\n            enonces = request.POST.get('enonce')\n            responses = request.POST.get('reponse')\n            maxima = request.POST.get('maxima')\n            interro = get_object_or_404(Interrogation, code = interrogation_id)\n            QuestionInterrogation(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "reponsesAlternativesInterro",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def reponsesAlternativesInterro(request):\n    try:\n        question = QuestionInterrogation.objects.all()\n        reponses = ReponsesAlternativesInterro.objects.all()\n        context = {'questions':question, 'reponses':reponses}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"enseignant/reponses_alternatives_interro.html\", context)\ndef insertReponseAlternativeInterro(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertReponseAlternativeInterro",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertReponseAlternativeInterro(request):\n    try:\n        if request.method == \"POST\":\n            id_question = request.POST.get(\"question\")\n            reponse_alternative = request.POST.get(\"reponseAlternative\")\n            question = get_object_or_404(QuestionInterrogation, pk = id_question)\n            ReponsesAlternativesInterro.objects.create(\n                question = question,\n                reponse_alternative = reponse_alternative\n            )",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateReponseAlternativeInterro",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateReponseAlternativeInterro(request):\n    try:\n        if request.method == \"POST\":\n            code=request.POST.get(\"code\")\n            id_question = request.POST.get(\"question\")\n            reponse_alternative = request.POST.get(\"reponseAlternative\")\n            question = get_object_or_404(QuestionInterrogation, pk = id_question)\n            ReponsesAlternativesInterro(\n                code = code,\n                question = question,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "publication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def publication(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'publications':posts}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"admin/all_publications.html\", context)\n# def comment_post(request, post_id):\n#     try:\n#         post = get_object_or_404(Publication, code=post_id)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "publication_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def publication_admin(request):\n    context={}\n    try:\n        publication = Publication.objects.all()\n        context = {'publications':publication}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'admin/publication.html', context)\ndef insertPublication(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertPublication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertPublication(request):\n    try:\n      if request.method == \"POST\":\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          image = request.FILES.get(\"image\")\n          if Publication.objects.filter(titre = titre.title(), description = description, user = request.user):\n            messages.warning(\"Ces informations existent déjà !\")\n            return redirect('publication_admin')\n          else:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updatePublication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updatePublication(request):\n    try:\n      if request.method == \"POST\":\n        code = request.POST.get(\"code\")\n        titre = request.POST.get(\"titre\")\n        description = request.POST.get(\"description\")\n        image = request.FILES.get(\"image\")\n        if Publication.objects.filter(titre = titre.capitalize(), description = description.capitalize(), user = request.user):\n                messages.warning(\"Ces informations existent déjà !\")\n                return redirect('publication_admin')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertPaiement",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertPaiement(request):\n    try:\n      if request.method == \"POST\":\n          id_apprenant = request.POST.get(\"apprenant_matricule\")\n          id_module = request.POST.get(\"module\")\n          montant = request.POST.get(\"montant\")\n          date_paiement = request.POST.get(\"date_paiement\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          module = get_object_or_404(Module, pk = id_module)\n          Paiement.objects.create(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updatePaiement",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updatePaiement(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          id_apprenant = request.POST.get(\"apprenant\")\n          id_module = request.POST.get(\"module\")\n          montant = request.POST.get(\"montant\")\n          date_paiement = request.POST.get(\"date_paiement\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          module = get_object_or_404(Module, pk = id_module)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "questionnaire",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def questionnaire(request):\n    try:\n        modules = Module.objects.all()\n        questionnaire = Questionnaire.objects.all()\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, 'enseignant/questionnaire.html', {'modules': modules, 'questionnaire':questionnaire})\ndef add_questionnaire(request):\n    try:\n        if request.method == \"POST\":",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "add_questionnaire",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def add_questionnaire(request):\n    try:\n        if request.method == \"POST\":\n            module_ids = request.POST.getlist('module_code')\n            questions = request.POST.getlist('question')\n            responses = request.POST.getlist('reponse')\n            maxima = request.POST.getlist('maxima')\n            for i in range(len(questions)):\n                Questionnaire.objects.create(\n                    module_id=module_ids[i],",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateQuestionnaire",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateQuestionnaire(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          id_module = request.POST.get(\"module\")\n          question = request.POST.get(\"question\")\n          reponse = request.POST.get(\"reponse\")\n          maxima = request.POST.get(\"maxima\")\n          module = get_object_or_404(Module, pk = id_module)\n          if Questionnaire.objects.filter(module = module, question = question.capitalize(), reponse = reponse.capitalize()):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "reponsesAlternatives",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def reponsesAlternatives(request):\n    try:\n        questionnaire = Questionnaire.objects.all()\n        reponses = Reponses_alternatives.objects.all()\n        context = {'questions':questionnaire, 'reponses':reponses}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"enseignant/reponses_alternatives.html\", context)\ndef insertReponseAlternative(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertReponseAlternative",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertReponseAlternative(request):\n    try:\n        if request.method == \"POST\":\n            id_questionnaire = request.POST.get(\"questionnaire\")\n            reponse_alternative = request.POST.get(\"reponseAlternative\")\n            questionnaire = get_object_or_404(Questionnaire, pk = id_questionnaire)\n            Reponses_alternatives.objects.create(\n                questionnaire = questionnaire,\n                reponse_alternative = reponse_alternative\n            )",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateReponseAlternative",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateReponseAlternative(request):\n    try:\n        if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            id_questionnaire = request.POST.get(\"questionnaire\")\n            reponse_alternative = request.POST.get(\"reponseAlternative\")\n            questionnaire = get_object_or_404(Questionnaire, pk = id_questionnaire)\n            Reponses_alternatives(\n                code = code,\n                questionnaire = questionnaire,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertTest",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertTest(request):\n    try:\n      if request.method == \"POST\":\n          id_apprenant = request.POST.get(\"id_apprenant\")\n          id_questionnaire = request.POST.get(\"id_questionnaire\")\n          reponse = request.POST.get(\"reponse\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          questionnaire = get_object_or_404(Questionnaire, pk = id_questionnaire)\n          Test.objects.create(\n              apprenant = apprenant,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "rediriger_utilisateur",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def rediriger_utilisateur(request):\n    user = request.user  # Récupération de l'utilisateur connecté\n    if user.apprenant is not None:  # Vérification si l'attribut `apprenant` n'est pas nul\n        if Apprenant.objects.filter(matricule=user.apprenant.matricule).exists():  # Vérification si le matricule de l'apprenant existe\n            apprenant = user.apprenant\n            inscription = Inscription.objects.filter(apprenant=apprenant).last()\n            if inscription:\n                if inscription.formation is None:\n                    messages.warning(request, \"Vous devez répondre à ces questions !\")\n                    return redirect('tester_apprenant')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "tester_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def tester_apprenant(request):\n    formations = Formation.objects.all()\n    context = {'formations':formations}\n    if request.method == \"POST\":\n        id_formation = request.POST.get(\"formation\")\n        formation = get_object_or_404(Formation, code=id_formation)\n        return redirect('prendre_test', formation_id=formation.code, question_index=0)\n    return render(request,'apprenant/pretestis.html', context)\ndef prendre_test(request, formation_id, question_index=0):\n    # Récupérer la formation spécifique",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "prendre_test",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def prendre_test(request, formation_id, question_index=0):\n    # Récupérer la formation spécifique\n    formation = get_object_or_404(Formation, code=formation_id)\n    user = request.user\n    # Filtrer les questions par formation\n    questions = Questionnaire.objects.filter(module=formation.module.code)\n    if question_index >= len(questions):\n        # Si toutes les questions ont été répondues, rediriger vers une page de succès ou de résultats\n        return redirect('test_termine', formation_id=formation.code)\n    # Obtenir la question actuelle",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "test_termine",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def test_termine(request, formation_id):\n        context = {}\n    # try:\n        # Récupérer la formation et l'utilisateur connecté\n        formation = get_object_or_404(Formation, pk=formation_id)\n        user = request.user\n        # Calculer la somme maxima des questions du module lié à la formation\n        somme_maxima = Questionnaire.objects.filter(module=formation.module.code).aggregate(Sum('maxima'))['maxima__sum']\n        # Récupérer le dernier test effectué par l'apprenant dans ce module\n        test = Test.objects.filter(apprenant=user.apprenant.matricule, module=formation.module).last()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "confirmer_modification",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def confirmer_modification(request, formation_id, niveau):\n    try:\n        formation = get_object_or_404(Formation, pk=formation_id)\n        apprenant = request.user.apprenant\n        inscription = Inscription.objects.filter(apprenant=apprenant, formation__isnull=True).last()\n        modalite = ModalitePaie.objects.filter(module = formation.module.code).last()\n        if inscription:\n            if niveau == 'debutant':\n                # Inscrire l'apprenant au niveau débutant\n                inscription.formation = formation",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichageModule",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichageModule(request):\n    try:\n        module = Inscription.objects.filter(apprenant = request.user.apprenant.matricule)\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        context = {'modules':module, 'formations':formations}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'apprenant/module.html', context)\ndef contenu_module(request, code):\n    return render(request, \"apprenant/formation.html\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "contenu_module",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def contenu_module(request, code):\n    return render(request, \"apprenant/formation.html\")\ndef formationsApprenant(request):\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        context = {'formations':formations}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"partials/learner_sidebar.html\", context)\ndef affichageFormationApprenant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "formationsApprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def formationsApprenant(request):\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        context = {'formations':formations}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"partials/learner_sidebar.html\", context)\ndef affichageFormationApprenant(request):\n    return render(request,'apprenant/formation.html')\ndef affichageEvaluation(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichageFormationApprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichageFormationApprenant(request):\n    return render(request,'apprenant/formation.html')\ndef affichageEvaluation(request):\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        interro = Interrogation.objects.all()\n        context = {'formations':formations, 'interrogations':interro}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'apprenant/evaluation.html', context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichageEvaluation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichageEvaluation(request):\n    try:\n        formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n        interro = Interrogation.objects.all()\n        context = {'formations':formations, 'interrogations':interro}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'apprenant/evaluation.html', context)\ndef affichagePublication(request):\n    return render(request,'apprenant/publication.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichagePublication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichagePublication(request):\n    return render(request,'apprenant/publication.html')\ndef sous_chapitre_apprenant(request):\n    try:\n        sous_chapitre = Sous_chapitre.objects.all()\n        context = {'sous_chapitres': sous_chapitre}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'apprenant/souschapitre.html',context)\ndef chapitre_apprenant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "sous_chapitre_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def sous_chapitre_apprenant(request):\n    try:\n        sous_chapitre = Sous_chapitre.objects.all()\n        context = {'sous_chapitres': sous_chapitre}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'apprenant/souschapitre.html',context)\ndef chapitre_apprenant(request):\n    return render(request,'apprenant/chapitre.html')\ndef enseignant_liste_apprenant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "chapitre_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def chapitre_apprenant(request):\n    return render(request,'apprenant/chapitre.html')\ndef enseignant_liste_apprenant(request):\n    try:\n        enseignant = request.user.enseignant  # Assuming the logged-in user is an `Enseignant`\n        inscriptions = Inscription.objects.filter(formation__enseignant=enseignant)\n        context = {'inscriptions':inscriptions}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'enseignant/listeApprenant.html',context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "enseignant_liste_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def enseignant_liste_apprenant(request):\n    try:\n        enseignant = request.user.enseignant  # Assuming the logged-in user is an `Enseignant`\n        inscriptions = Inscription.objects.filter(formation__enseignant=enseignant)\n        context = {'inscriptions':inscriptions}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'enseignant/listeApprenant.html',context)\ndef sous_chapitre_enseignant(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "sous_chapitre_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def sous_chapitre_enseignant(request):\n    try:\n        sous_chapitre = Sous_chapitre.objects.all()\n        context = {'sous_chapitres': sous_chapitre}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'enseignant/souschapitre.html', context)\ndef insertSousChapitre(request):\n    try:\n        if request.method == \"POST\":",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertSousChapitre",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertSousChapitre(request):\n    try:\n        if request.method == \"POST\":\n            titre = request.POST.get(\"titre\")\n            contenu = request.POST.get(\"contenu\")\n            if Sous_chapitre.objects.filter(titre = titre, contenu = contenu):\n                messages.warning(request, \"Ces informations existent déjà !\")\n                return redirect('sous_chapitre_enseignant')\n            else:\n                Sous_chapitre.objects.create(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateSousChapitre",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateSousChapitre(request):\n    try:\n        if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            titre = request.POST.get(\"titre\")\n            contenu = request.POST.get(\"contenu\")\n            if Sous_chapitre.objects.filter(titre = titre, contenu = contenu):\n                messages.warning(request, \"Ces informations existent déjà !\")\n                return redirect('sous_chapitre_enseignant')\n            else:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "chapitre_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def chapitre_enseignant(request):\n    try:\n        chapitre = Chapitre.objects.all()\n        sous_chapitre = Sous_chapitre.objects.all()\n        contenu_chapitre = ContenuChapitre.objects.all()\n        context = {'chapitres': chapitre, 'sous_chapitres':sous_chapitre, 'contenu_chapitre':contenu_chapitre}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'enseignant/chapitre.html', context)\ndef insertChapitre(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertChapitre",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertChapitre(request):\n    try:\n        if request.method == \"POST\":\n            titre = request.POST.get(\"titre\")\n            if Chapitre.objects.filter(titre = titre):\n                messages.warning(request, \"Ces informations existent déjà !\")\n                return redirect('chapitre_enseignant')\n            else:\n                Chapitre.objects.create(\n                    titre = titre",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateChapitre",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateChapitre(request):\n    try:\n        if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            titre = request.POST.get(\"titre\")\n            if Chapitre.objects.filter(titre = titre):\n                messages.warning(request, \"Ces informations existent déjà !\")\n                return redirect('chapitre_enseignant')\n            else:\n                Chapitre(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertContenuChapitre",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertContenuChapitre(request):\n    try:\n        if request.method == \"POST\":\n            id_chapitre = request.POST.get(\"chapitre\")\n            id_sous_chapitre = request.POST.get(\"sous_chapitre\")\n            chapitre = get_object_or_404(Chapitre, pk = id_chapitre)\n            sous_chapitre = get_object_or_404(Sous_chapitre, pk = id_sous_chapitre)\n            if ContenuChapitre.objects.filter(chapitre = chapitre, sous_chapitre=sous_chapitre):\n                messages.warning(request, \"Ces informations existent déjà !\")\n                return redirect('chapitre_enseignant')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "typePublication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def typePublication(request):\n    return render(request,'admin/typepublication.html')\ndef participation(request):\n    participations = Participation.objects.all()\n    context = {'participations':participations}\n    return render(request, 'enseignant/participation.html', context)\ndef generate_pdf_recu(request, code):\n    paiement = get_object_or_404(Paiement, code=code)\n    context = {'paiement':paiement}\n    return render(request, 'admin/recu.html', context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "participation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def participation(request):\n    participations = Participation.objects.all()\n    context = {'participations':participations}\n    return render(request, 'enseignant/participation.html', context)\ndef generate_pdf_recu(request, code):\n    paiement = get_object_or_404(Paiement, code=code)\n    context = {'paiement':paiement}\n    return render(request, 'admin/recu.html', context)\ndef pdf_preview_recu(request, code):\n    paiement = get_object_or_404(Paiement, code=code)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "generate_pdf_recu",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def generate_pdf_recu(request, code):\n    paiement = get_object_or_404(Paiement, code=code)\n    context = {'paiement':paiement}\n    return render(request, 'admin/recu.html', context)\ndef pdf_preview_recu(request, code):\n    paiement = get_object_or_404(Paiement, code=code)\n    context = {'paiement':paiement}\n    return render(request, 'admin/preview_page.html', context)\ndef generate_pdf_certificate(request, code):\n    participation = get_object_or_404(Participation, code=code)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "pdf_preview_recu",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def pdf_preview_recu(request, code):\n    paiement = get_object_or_404(Paiement, code=code)\n    context = {'paiement':paiement}\n    return render(request, 'admin/preview_page.html', context)\ndef generate_pdf_certificate(request, code):\n    participation = get_object_or_404(Participation, code=code)\n    context = {'participation':participation}\n    return render(request, 'admin/certificat.html', context)\ndef pdf_preview_certificate(request, code):\n    participation = get_object_or_404(Participation, code=code)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "generate_pdf_certificate",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def generate_pdf_certificate(request, code):\n    participation = get_object_or_404(Participation, code=code)\n    context = {'participation':participation}\n    return render(request, 'admin/certificat.html', context)\ndef pdf_preview_certificate(request, code):\n    participation = get_object_or_404(Participation, code=code)\n    aujourdhui = date.today()\n    context = {'participation':participation, 'date':aujourdhui}\n    return render(request, 'admin/preview_certificate_page.html', context)\n# ==============================================================================================================================",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "pdf_preview_certificate",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def pdf_preview_certificate(request, code):\n    participation = get_object_or_404(Participation, code=code)\n    aujourdhui = date.today()\n    context = {'participation':participation, 'date':aujourdhui}\n    return render(request, 'admin/preview_certificate_page.html', context)\n# ==============================================================================================================================\n# CHAT\n# ===============================================================================================================================\n@login_required\ndef chat_apprenant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "chat_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def chat_apprenant(request):\n        context = {}\n    # try:\n        conversations = []\n        enseignants = []\n        apprenants = []\n        if request.user.apprenant:\n            formations = Inscription.objects.filter(apprenant=request.user.apprenant.matricule)\n            conversations = Conversation.objects.filter(apprenant=request.user)\n            enseignants = CompteUtilisateur.objects.filter(enseignant__isnull=False)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "send_message",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def send_message(request, conversation_id):\n    try:\n        conversation = get_object_or_404(Conversation, pk=conversation_id)\n        if request.method == 'POST':\n            content = request.POST.get('content')\n            if content:\n                Message.objects.create(\n                    conversation=conversation,\n                    sender=request.user,\n                    content=content",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "conversation_detail",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def conversation_detail(request, conversation_id):\n    try:\n        conversation = get_object_or_404(Conversation, pk = conversation_id)\n        messages = Message.objects.filter(conversation = conversation)\n        context = {'messages':messages, 'conversation': conversation}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, 'envoyer_message.html', context)\ndef new_conversation_apprenant(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "new_conversation_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def new_conversation_apprenant(request):\n    try:\n        if request.method == \"POST\":\n            apprenant = request.user\n            enseignant_id = request.POST.get(\"enseignant_id\")\n            enseignant = get_object_or_404(CompteUtilisateur, pk = enseignant_id)\n            Conversation.objects.create(\n                apprenant = apprenant,\n                enseignant = enseignant\n            )",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "new_conversation_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def new_conversation_enseignant(request):\n    try:\n        if request.method == \"POST\":\n            enseignant = request.user\n            id_apprenant = request.POST.get(\"apprenant_id\")\n            apprenant = get_object_or_404(CompteUtilisateur, pk = id_apprenant)\n            Conversation.objects.create(\n                apprenant = apprenant,\n                enseignant = enseignant\n            )",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "learning_platform.asgi",
        "description": "learning_platform.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "learning_platform.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-yqccmbzz&$ojuu(#_axkgf!c1uukvqe5ouocjtx5$&@#)!m8%i'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-yqccmbzz&$ojuu(#_axkgf!c1uukvqe5ouocjtx5$&@#)!m8%i'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'eScholar',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'eScholar',\n]\nMIDDLEWARE = [",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'learning_platform.urls'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "ROOT_URLCONF = 'learning_platform.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [ BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [ BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "WSGI_APPLICATION = 'learning_platform.wsgi.application'\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n#API\nDAILY_API_KEY = '56b39b0f867d2450098b69cdc80536b5ebe6c1299fe8ccd0c2f392b32c0b362d'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n#API\nDAILY_API_KEY = '56b39b0f867d2450098b69cdc80536b5ebe6c1299fe8ccd0c2f392b32c0b362d'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'eScholar_db',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n#API\nDAILY_API_KEY = '56b39b0f867d2450098b69cdc80536b5ebe6c1299fe8ccd0c2f392b32c0b362d'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'eScholar_db',\n        'USER': 'root',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "DAILY_API_KEY",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "DAILY_API_KEY = '56b39b0f867d2450098b69cdc80536b5ebe6c1299fe8ccd0c2f392b32c0b362d'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'eScholar_db',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': 'localhost',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'eScholar_db',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }\n}",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "LANGUAGE_CODE = 'fr-fr'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nathanaeltsongo04@gmail.com'\nEMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "MEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nathanaeltsongo04@gmail.com'\nEMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'\n# Default primary key field type",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nathanaeltsongo04@gmail.com'\nEMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nathanaeltsongo04@gmail.com'\nEMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nathanaeltsongo04@gmail.com'\nEMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nathanaeltsongo04@gmail.com'\nEMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nathanaeltsongo04@gmail.com'\nEMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = 'nathanaeltsongo04@gmail.com'\nEMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "EMAIL_HOST_USER = 'nathanaeltsongo04@gmail.com'\nEMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = 'cvmbubfurglpjpsc'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "learning_platform.urls",
        "description": "learning_platform.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('eScholar.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "learning_platform.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "learning_platform.wsgi",
        "description": "learning_platform.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "learning_platform.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'learning_platform.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]