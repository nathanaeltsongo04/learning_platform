[
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponseRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0001_initial",
        "description": "eScholar.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Apprenant',\n            fields=[\n                ('matricule', models.CharField(max_length=25, primary_key=True, serialize=False)),",
        "detail": "eScholar.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0002_auto_20240808_1928",
        "description": "eScholar.migrations.0002_auto_20240808_1928",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0001_initial'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='compteutilisateur',\n            name='photo',\n        ),\n        migrations.AlterField(",
        "detail": "eScholar.migrations.0002_auto_20240808_1928",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0003_publication_compte_utilisateur",
        "description": "eScholar.migrations.0003_publication_compte_utilisateur",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0002_auto_20240808_1928'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='publication',\n            name='compte_utilisateur',\n            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='eScholar.compteutilisateur'),\n            preserve_default=False,",
        "detail": "eScholar.migrations.0003_publication_compte_utilisateur",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0004_auto_20240808_2223",
        "description": "eScholar.migrations.0004_auto_20240808_2223",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0003_publication_compte_utilisateur'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='module',\n            name='description',\n            field=models.TextField(),\n        ),",
        "detail": "eScholar.migrations.0004_auto_20240808_2223",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0005_alter_formation_duree",
        "description": "eScholar.migrations.0005_alter_formation_duree",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0004_auto_20240808_2223'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='formation',\n            name='duree',\n            field=models.CharField(max_length=20),\n        ),",
        "detail": "eScholar.migrations.0005_alter_formation_duree",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0006_auto_20240810_1322",
        "description": "eScholar.migrations.0006_auto_20240810_1322",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0005_alter_formation_duree'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Sous_chapitre',\n            fields=[\n                ('code', models.AutoField(primary_key=True, serialize=False)),\n                ('contenu', models.TextField()),",
        "detail": "eScholar.migrations.0006_auto_20240810_1322",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0007_alter_evaluation_apprenant",
        "description": "eScholar.migrations.0007_alter_evaluation_apprenant",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0006_auto_20240810_1322'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='evaluation',\n            name='apprenant',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='eScholar.apprenant'),\n        ),",
        "detail": "eScholar.migrations.0007_alter_evaluation_apprenant",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0008_auto_20240810_1425",
        "description": "eScholar.migrations.0008_auto_20240810_1425",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0007_alter_evaluation_apprenant'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='commentaire',\n            name='id',\n            field=models.AutoField(primary_key=True, serialize=False),\n        ),",
        "detail": "eScholar.migrations.0008_auto_20240810_1425",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0009_publication_image",
        "description": "eScholar.migrations.0009_publication_image",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0008_auto_20240810_1425'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='publication',\n            name='image',\n            field=models.ImageField(blank=True, upload_to='publication/'),\n        ),",
        "detail": "eScholar.migrations.0009_publication_image",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0010_auto_20240811_1534",
        "description": "eScholar.migrations.0010_auto_20240811_1534",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0009_publication_image'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='test',\n            name='apprenant',\n        ),\n        migrations.AddField(",
        "detail": "eScholar.migrations.0010_auto_20240811_1534",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0011_chapitre_titre",
        "description": "eScholar.migrations.0011_chapitre_titre",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0010_auto_20240811_1534'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='chapitre',\n            name='titre',\n            field=models.CharField(default=1, max_length=255),\n            preserve_default=False,",
        "detail": "eScholar.migrations.0011_chapitre_titre",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0012_alter_inscription_formation",
        "description": "eScholar.migrations.0012_alter_inscription_formation",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0011_chapitre_titre'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='inscription',\n            name='formation',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='eScholar.formation'),\n        ),",
        "detail": "eScholar.migrations.0012_alter_inscription_formation",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0013_auto_20240812_0927",
        "description": "eScholar.migrations.0013_auto_20240812_0927",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0012_alter_inscription_formation'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='questionnaire',\n            name='module',\n        ),\n        migrations.AddField(",
        "detail": "eScholar.migrations.0013_auto_20240812_0927",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0014_auto_20240812_1034",
        "description": "eScholar.migrations.0014_auto_20240812_1034",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0013_auto_20240812_0927'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='test',\n            name='user',\n        ),\n        migrations.AddField(",
        "detail": "eScholar.migrations.0014_auto_20240812_1034",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "eScholar.migrations.0015_alter_module_ressource",
        "description": "eScholar.migrations.0015_alter_module_ressource",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('eScholar', '0014_auto_20240812_1034'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='module',\n            name='ressource',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='eScholar.ressource'),\n        ),",
        "detail": "eScholar.migrations.0015_alter_module_ressource",
        "documentation": {}
    },
    {
        "label": "TabClient",
        "kind": 6,
        "importPath": "eScholar.admin",
        "description": "eScholar.admin",
        "peekOfCode": "class TabClient(admin.ModelAdmin):\n    list_display=['last_name','first_name','username','email','password']",
        "detail": "eScholar.admin",
        "documentation": {}
    },
    {
        "label": "EscholarConfig",
        "kind": 6,
        "importPath": "eScholar.apps",
        "description": "eScholar.apps",
        "peekOfCode": "class EscholarConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'eScholar'",
        "detail": "eScholar.apps",
        "documentation": {}
    },
    {
        "label": "Niveau",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Niveau(models.Model):\n    code = models.AutoField(primary_key=True)\n    designation = models.CharField(max_length=25)\n    class Meta:\n        db_table='Niveau'\nclass Domaine(models.Model):\n    code =models.AutoField(primary_key=True)\n    designation=models.CharField(max_length=50)\n    class Meta:\n        db_table='Domaine'",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Domaine",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Domaine(models.Model):\n    code =models.AutoField(primary_key=True)\n    designation=models.CharField(max_length=50)\n    class Meta:\n        db_table='Domaine'\nclass Apprenant(models.Model):\n    matricule=models.CharField(max_length=25, primary_key=True)\n    nom=models.CharField(max_length=25)\n    postnom=models.CharField(max_length=25)\n    prenom=models.CharField(max_length=25)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Apprenant",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Apprenant(models.Model):\n    matricule=models.CharField(max_length=25, primary_key=True)\n    nom=models.CharField(max_length=25)\n    postnom=models.CharField(max_length=25)\n    prenom=models.CharField(max_length=25)\n    genre=models.CharField(max_length=1)\n    etatcivil=models.CharField(max_length=25)\n    addresse=models.CharField(max_length=50)\n    contact=models.CharField(max_length=15)\n    profession=models.CharField(max_length=50)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Enseignant",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Enseignant(models.Model):\n    matricule=models.CharField(max_length=25, primary_key=True)\n    nom=models.CharField(max_length=25)\n    postnom=models.CharField(max_length=25)\n    prenom=models.CharField(max_length=25)\n    genre=models.CharField(max_length=1)\n    etatcivil=models.CharField(max_length=25)\n    addresse=models.CharField(max_length=50)\n    contact=models.CharField(max_length=15)\n    profession=models.CharField(max_length=50)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "TypeRessource",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class TypeRessource(models.Model):\n    code=models.AutoField(primary_key=True)\n    designation=models.CharField(max_length=25)\n    class Meta:\n        db_table='TypeRessource'\nclass Ressource(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=25)\n    description=models.TextField()\n    contenu=models.FileField(upload_to=\"Ressource/\", max_length=500)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Ressource",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Ressource(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=25)\n    description=models.TextField()\n    contenu=models.FileField(upload_to=\"Ressource/\", max_length=500)\n    type_ressource=models.ForeignKey(TypeRessource,on_delete=models.CASCADE)\n    class Meta:\n        db_table='Ressource'\nclass Sous_chapitre(models.Model):\n    code=models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Sous_chapitre",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Sous_chapitre(models.Model):\n    code=models.AutoField(primary_key=True)\n    contenu=models.TextField()\n    class Meta:\n        db_table='Sous_chapitre'\nclass Chapitre(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre = models.CharField(max_length=255)\n    sous_chapitre=models.ForeignKey(Sous_chapitre, on_delete=models.CASCADE)\n    description=models.TextField()",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Chapitre",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Chapitre(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre = models.CharField(max_length=255)\n    sous_chapitre=models.ForeignKey(Sous_chapitre, on_delete=models.CASCADE)\n    description=models.TextField()\n    class Meta:\n        db_table='Chapitre'\nclass Module(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=25)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Module",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Module(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=25)\n    description=models.TextField()\n    prix=models.DecimalField(max_digits=10, decimal_places=2)\n    niveau=models.ForeignKey(Niveau,on_delete=models.CASCADE)\n    chapitre=models.ForeignKey(Chapitre, on_delete=models.CASCADE)\n    ressource=models.ForeignKey(Ressource,on_delete=models.CASCADE, null=True)\n    class Meta:\n        db_table='Module'",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Formation",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Formation(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=50)\n    description = models.TextField ()\n    duree=models.CharField(max_length = 20)\n    date_debut=models.DateField()\n    date_fin=models.DateField()\n    domaine = models.ForeignKey(Domaine, on_delete=models.CASCADE)\n    module = models.ForeignKey(Module, on_delete=models.CASCADE)\n    enseignant=models.ForeignKey(Enseignant, on_delete=models.CASCADE)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "ModalitePaie",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class ModalitePaie(models.Model):\n    code=models.AutoField(primary_key=True)\n    tranche=models.CharField(max_length=25)\n    montant_fixe=models.DecimalField(max_digits=10,decimal_places=2)\n    module=models.ForeignKey(Module,on_delete=models.CASCADE)\n    class Meta:\n        db_table='ModalitePaie'\nclass Inscription(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Inscription",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Inscription(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)\n    formation=models.ForeignKey(Formation,on_delete=models.CASCADE, null=True) \n    modalite=models.ForeignKey(ModalitePaie,on_delete=models.CASCADE)\n    date_inscription=models.DateTimeField()\n    class Meta:\n        db_table='Inscription'\nclass Evaluation(models.Model):\n    code=models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Evaluation",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Evaluation(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant, on_delete=models.CASCADE, null=True)\n    formation=models.ForeignKey(Formation,on_delete=models.CASCADE)\n    maximum=models.DecimalField(max_digits=10,decimal_places=1)\n    cote=models.DecimalField(max_digits=10,decimal_places=1)\n    date_evaluation=models.DateTimeField()\n    class Meta:\n        db_table='Evaluation'\nclass CompteUtilisateur(AbstractUser):",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "CompteUtilisateur",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class CompteUtilisateur(AbstractUser):\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE, null=True)\n    enseignant=models.ForeignKey(Enseignant,on_delete=models.CASCADE, null = True)\nclass Publication(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=255)\n    description=models.TextField()\n    user=models.ForeignKey(CompteUtilisateur,on_delete=models.CASCADE)\n    image=models.ImageField(upload_to='publication/', blank=True)\n    date_publication=models.DateTimeField(auto_now_add=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Publication",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Publication(models.Model):\n    code=models.AutoField(primary_key=True)\n    titre=models.CharField(max_length=255)\n    description=models.TextField()\n    user=models.ForeignKey(CompteUtilisateur,on_delete=models.CASCADE)\n    image=models.ImageField(upload_to='publication/', blank=True)\n    date_publication=models.DateTimeField(auto_now_add=True)\n    def total_likes(self):\n        return self.likes.count()\n    class Meta:",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Like",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Like(models.Model):\n    id = models.AutoField(primary_key=True)\n    publication = models.ForeignKey(Publication, related_name='likes', on_delete=models.CASCADE)\n    user = models.ForeignKey(CompteUtilisateur, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = 'Like'\nclass Commentaire(models.Model):\n    id = models.AutoField(primary_key=True)\n    publication = models.ForeignKey(Publication, related_name='comments', on_delete=models.CASCADE)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Commentaire",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Commentaire(models.Model):\n    id = models.AutoField(primary_key=True)\n    publication = models.ForeignKey(Publication, related_name='comments', on_delete=models.CASCADE)\n    user = models.ForeignKey(CompteUtilisateur, on_delete=models.CASCADE)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        db_table = 'Commentaire'\nclass Paiement(models.Model):\n    code=models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Paiement",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Paiement(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)\n    module=models.ForeignKey(Module,on_delete=models.CASCADE)\n    montant=models.DecimalField(max_digits=10,decimal_places=2)\n    date_paiement=models.DateTimeField()\n    class Meta:\n        db_table='Paiement'\nclass Questionnaire(models.Model):\n    code=models.AutoField(primary_key=True)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Questionnaire",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Questionnaire(models.Model):\n    code=models.AutoField(primary_key=True)\n    formation=models.ForeignKey(Formation, on_delete=models.CASCADE)\n    question=models.TextField()\n    reponse=models.TextField()\n    class Meta:\n        db_table='Questionnaire'\nclass Test(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "eScholar.models",
        "description": "eScholar.models",
        "peekOfCode": "class Test(models.Model):\n    code=models.AutoField(primary_key=True)\n    apprenant=models.ForeignKey(Apprenant,on_delete=models.CASCADE)\n    questionnaire=models.ForeignKey(Questionnaire,on_delete=models.CASCADE)\n    reponse=models.TextField()\n    class Meta:\n        db_table='Test'",
        "detail": "eScholar.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "eScholar.urls",
        "description": "eScholar.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.index, name='home'),\n    path('Test', views.test,name='Test'),\n    path('dashboard_apprenant/', views.dashboard_apprenant, name='dashboard_apprenant'),\n    # path('formation/', views.formation_apprenant, name='formation_apprenant'),\n    path('chat/', views.chat_apprenant, name='chat_apprenant'),\n    path('horaire/', views.horaire_apprenant, name='horaire_apprenant'),\n    path('correcton/',views.correction_enseignant,name='correction_enseignant'),\n    path('cote/',views.correction_enseignant,name='cote_enseignant'),\n    # path('formation/',views.formation_enseignant,name='formation_enseignant'),",
        "detail": "eScholar.urls",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def index(request):\n    return render(request, 'index.html')\ndef test(request):\n    try:\n      test = Test.objects.all()\n      context = {'tests':test}\n    except:\n      print('An exception occurred')\n    return render(request,'Test.html', context)\ndef dashboard_apprenant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def test(request):\n    try:\n      test = Test.objects.all()\n      context = {'tests':test}\n    except:\n      print('An exception occurred')\n    return render(request,'Test.html', context)\ndef dashboard_apprenant(request):\n    try:\n        publications = Publication.objects.all()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "dashboard_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def dashboard_apprenant(request):\n    try:\n        publications = Publication.objects.all()\n        total_publications = publications.count()\n        total_modules = Module.objects.all().count()\n        total_evaluations=Formation.objects.all().count()\n        context = {\n            'publications': publications, \n            'total_publications':total_publications,\n            'total_modules':total_modules,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "formation_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def formation_apprenant(request):\n    return render(request,'apprenant/formation.html')\ndef ressource_apprenant(request):\n    try:\n        type = TypeRessource.objects.all()\n        ressource = Ressource.objects.all()\n        context = {'ressources':ressource, 'types':type}\n    except:\n        messages.error(request, \"Une erreur s'est produite lors de l'exécution \\n Actualisez la page !\")\n    return render(request,'apprenant/ressource.html', context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "ressource_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def ressource_apprenant(request):\n    try:\n        type = TypeRessource.objects.all()\n        ressource = Ressource.objects.all()\n        context = {'ressources':ressource, 'types':type}\n    except:\n        messages.error(request, \"Une erreur s'est produite lors de l'exécution \\n Actualisez la page !\")\n    return render(request,'apprenant/ressource.html', context)\ndef chat_apprenant(request):\n    return render(request,'apprenant/chat.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "chat_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def chat_apprenant(request):\n    return render(request,'apprenant/chat.html')\ndef horaire_apprenant(request):\n    return render(request,'apprenant/horaire.html')\ndef formation_enseignant(request):\n    return render(request,'enseignant/formation.html')\ndef cote_enseignant(request):\n    return render(request,'enseignant/cote.html')\ndef correction_enseignant(request):\n    return render(request,'enseignant/correction.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "horaire_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def horaire_apprenant(request):\n    return render(request,'apprenant/horaire.html')\ndef formation_enseignant(request):\n    return render(request,'enseignant/formation.html')\ndef cote_enseignant(request):\n    return render(request,'enseignant/cote.html')\ndef correction_enseignant(request):\n    return render(request,'enseignant/correction.html')\ndef dashboard_enseignant(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "formation_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def formation_enseignant(request):\n    return render(request,'enseignant/formation.html')\ndef cote_enseignant(request):\n    return render(request,'enseignant/cote.html')\ndef correction_enseignant(request):\n    return render(request,'enseignant/correction.html')\ndef dashboard_enseignant(request):\n    try:\n        ressources = Ressource.objects.all()\n        total_ressources = ressources.count()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "cote_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def cote_enseignant(request):\n    return render(request,'enseignant/cote.html')\ndef correction_enseignant(request):\n    return render(request,'enseignant/correction.html')\ndef dashboard_enseignant(request):\n    try:\n        ressources = Ressource.objects.all()\n        total_ressources = ressources.count()\n        total_publications = Publication.objects.all().count()\n        total_modules=Module.objects.all().count()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "correction_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def correction_enseignant(request):\n    return render(request,'enseignant/correction.html')\ndef dashboard_enseignant(request):\n    try:\n        ressources = Ressource.objects.all()\n        total_ressources = ressources.count()\n        total_publications = Publication.objects.all().count()\n        total_modules=Module.objects.all().count()\n        context = {\n            'ressources': ressources, ",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "dashboard_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def dashboard_enseignant(request):\n    try:\n        ressources = Ressource.objects.all()\n        total_ressources = ressources.count()\n        total_publications = Publication.objects.all().count()\n        total_modules=Module.objects.all().count()\n        context = {\n            'ressources': ressources, \n            'total_ressources':total_ressources,\n            'total_publications':total_publications,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "authentification",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def authentification(request):\n    try:\n        if request.method == \"POST\":\n            username = request.POST.get(\"nomdutilisateur\")\n            password = request.POST.get(\"password\")\n            # Authentification de l'utilisateur\n            user = authenticate(request, username=username, password=password)\n            if user is not None:\n                login(request, user)  # Connexion de l'utilisateur\n                messages.success(request, f\"Bienvenue, {user.username}!\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "creer_compte",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def creer_compte(request):\n    try:\n        if request.method == \"POST\":\n            matricule = request.POST.get(\"matricule\")\n            username = request.POST.get(\"nomdutilisateur\")\n            password = request.POST.get(\"password\")\n            confirmpassword = request.POST.get(\"confirmpassword\")\n            # Vérification si le matricule ou le nom d'utilisateur existe déjà\n            if CompteUtilisateur.objects.filter(enseignant=matricule).exists() or CompteUtilisateur.objects.filter(apprenant=matricule).exists():\n                messages.warning(request, \"Ce Matricule a déjà un compte !\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect('home')\ndef dashboard_admin(request):\n    try:\n        apprenants = Apprenant.objects.all()\n        total_apprenants = apprenants.count()\n        total_enseignants = Enseignant.objects.all().count()\n        total_formations=Formation.objects.all().count()\n        context = {",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "dashboard_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def dashboard_admin(request):\n    try:\n        apprenants = Apprenant.objects.all()\n        total_apprenants = apprenants.count()\n        total_enseignants = Enseignant.objects.all().count()\n        total_formations=Formation.objects.all().count()\n        context = {\n            'apprenants': apprenants, \n            'total_apprenants':total_apprenants,\n            'total_enseignants':total_enseignants,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "domaine_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def domaine_admin(request):\n    try:\n        domaine = Domaine.objects.all()\n        context = {'domaines':domaine}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'admin/domaine.html', context)\ndef modalitepaiement(request):\n    try:\n      modalite = ModalitePaie.objects.all()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "modalitepaiement",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def modalitepaiement(request):\n    try:\n      modalite = ModalitePaie.objects.all()\n      module = Module.objects.all()\n      context = {'modalitepaies':modalite, 'modules':module}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'admin/modalitepaiement.html', context)\ndef niveau(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "niveau",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def niveau(request):\n    try:\n        niveau = Niveau.objects.all()\n        context = {'niveaux':niveau}\n    except Exception as e:\n        messages.error(\"Une erreur s'est produite lors de l'exécution \\n Actualisez la page !\")\n    return render(request,'admin/niveau.html',context)\ndef paiement(request):\n    try:\n        paiement = Paiement.objects.all()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "paiement",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def paiement(request):\n    try:\n        paiement = Paiement.objects.all()\n        apprenant = Apprenant.objects.all()\n        module = Module.objects.all()\n        context = {'paiements':paiement, 'apprenants':apprenant, 'modules':module}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        return redirect('paiement')\n    return render(request,'admin/paiement.html', context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "typeressource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def typeressource(request):\n    try:\n        type = TypeRessource.objects.all()\n        context = {'types':type}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        return redirect('inscription_admin')\n    return render(request,'enseignant/typeressource.html', context)\n# =======================================================================================================\n# NIVEAU",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertNiveau",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertNiveau(request):\n    try:\n      if request.method == \"POST\":\n        designation = request.POST.get(\"designation\")\n        if Niveau.objects.filter(designation = designation.capitalize()):\n            messages.warning(request, \"Cette information existe déjà !\")\n        else:\n            Niveau.objects.create(\n                designation = designation.capitalize()\n            )",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateNiveau",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateNiveau(request):\n    try:\n      if request.method == \"POST\":\n        code = request.POST.get(\"code\")\n        designation = request.POST.get(\"designation\")\n        if Niveau.objects.filter(designation = designation.capitalize()):\n            messages.warning(request, \"Cette information existe déjà !\")\n        else:\n            Niveau(\n                code = code,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertDomaine",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertDomaine(request):\n    try:\n      if request.method == \"POST\":\n        designation = request.POST.get(\"designation\")\n        if Domaine.objects.filter(designation = designation.capitalize()):\n            messages.warning(request, \"Cette information existe déjà !\")\n        else:\n            Domaine.objects.create(\n                designation = designation.capitalize()\n            )",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateDomaine",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateDomaine(request):\n    try:\n      if request.method == \"POST\":\n        code = request.POST.get(\"code\")\n        designation = request.POST.get(\"designation\")\n        if Domaine.objects.filter(designation = designation.capitalize()):\n            messages.error(request, \"Cette information existe déjà !\")\n        else:\n            Domaine(\n                code = code,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "apprenant_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def apprenant_admin(request):\n    try:\n      apprenant = Apprenant.objects.all()\n      context = {'apprenants':apprenant}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'admin/apprenant.html', context)\ndef generer_matricule_apprenant():\n        # Récupérer le dernier matricule pour déterminer le prochain\n        dernier_etudiant = Apprenant.objects.last()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "generer_matricule_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def generer_matricule_apprenant():\n        # Récupérer le dernier matricule pour déterminer le prochain\n        dernier_etudiant = Apprenant.objects.last()\n        if dernier_etudiant:\n            dernier_numero = int(dernier_etudiant.matricule[3:])  # Extrait le numéro après \"ETU\"\n        else:\n            dernier_numero = 0\n        prochain_numero = dernier_numero + 1\n        return f\"ETU{prochain_numero:04d}\"\ndef insertApprenant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertApprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertApprenant(request):\n    try:\n      if request.method == \"POST\":\n        nom = request.POST.get(\"nom\")\n        postnom = request.POST.get(\"postnom\")\n        prenom = request.POST.get(\"prenom\")\n        genre = request.POST.get(\"genre\")\n        etatcivil = request.POST.get(\"etatcivil\")\n        addresse = request.POST.get(\"addresse\")\n        contact = request.POST.get(\"contact\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateApprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateApprenant(request):\n    try:\n      if request.method == \"POST\":\n        matricule = request.POST.get(\"matricule\")\n        nom = request.POST.get(\"nom\")\n        postnom = request.POST.get(\"postnom\")\n        prenom = request.POST.get(\"prenom\")\n        genre = request.POST.get(\"genre\")\n        etatcivil = request.POST.get(\"etatcivil\")\n        addresse = request.POST.get(\"addresse\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "enseignant_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def enseignant_admin(request):\n    try:\n      enseignant = Enseignant.objects.all()\n      context = {'enseignants':enseignant}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n      return redirect('apprenant_admin')\n    return render(request,'admin/enseignant.html', context)\ndef generer_matricule_enseignant():\n    # Récupérer le dernier matricule pour déterminer le prochain",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "generer_matricule_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def generer_matricule_enseignant():\n    # Récupérer le dernier matricule pour déterminer le prochain\n    dernier_enseignant = Enseignant.objects.last()\n    if dernier_enseignant:\n        dernier_numero = int(dernier_enseignant.matricule[3:])  # Extrait le numéro après \"ETU\"\n    else:\n        dernier_numero = 0\n    prochain_numero = dernier_numero + 1\n    return f\"ENS{prochain_numero:04d}\"\ndef insertEnseignant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertEnseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertEnseignant(request):\n    try:\n      if request.method == \"POST\":\n        nom = request.POST.get(\"nom\")\n        postnom = request.POST.get(\"postnom\")\n        prenom = request.POST.get(\"prenom\")\n        genre = request.POST.get(\"genre\")\n        etatcivil = request.POST.get(\"etatcivil\")\n        addresse = request.POST.get(\"addresse\")\n        contact = request.POST.get(\"contact\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateEnseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateEnseignant(request):\n    try:\n        if request.method == \"POST\":\n            matricule = request.POST.get(\"matricule\")\n            nom = request.POST.get(\"nom\")\n            postnom = request.POST.get(\"postnom\")\n            prenom = request.POST.get(\"prenom\")\n            genre = request.POST.get(\"genre\")\n            etatcivil = request.POST.get(\"etatcivil\")\n            addresse = request.POST.get(\"addresse\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertTypeRessource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertTypeRessource(request):\n    try:\n      if request.method == \"POST\":\n          designation = request.POST.get(\"designation\")\n          if TypeRessource.objects.filter(designation = designation.capitalize()):\n              messages.warning(request, \"Cette information existe déjà !\")\n              return redirect('typeressource')\n          else:\n            TypeRessource.objects.create(\n                designation = designation.capitalize()",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateTypeRessource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateTypeRessource(request):\n    try:\n        if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            designation = request.POST.get(\"designation\")\n            if TypeRessource.objects.filter(designation = designation.capitalize()):\n                messages.error(request,\"Cette information existe déjà !\")\n            else:\n                TypeRessource(\n                    code = code,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "ressource_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def ressource_admin(request):\n    try:\n        type = TypeRessource.objects.all()\n        ressource = Ressource.objects.all()\n        context = {'ressources':ressource, 'types':type}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, 'enseignant/ressource.html', context)\ndef insertRessource(request):\n    try:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertRessource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertRessource(request):\n    try:\n      if request.method == \"POST\":\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          contenu = request.FILES.get(\"contenu\")\n          id_type_ressource = request.POST.get(\"type_ressource\")\n          type_ressource = get_object_or_404(TypeRessource, pk = id_type_ressource)\n          if Ressource.objects.filter(titre = titre.capitalize(), description = description.capitalize()):\n              messages.warning(request,\"Ces informations existent déjà !\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateRessource",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateRessource(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          contenu = request.FILES.get(\"contenu\")\n          id_type_ressource = request.POST.get(\"type_ressource\")\n          type_ressource = get_object_or_404(TypeRessource, pk = id_type_ressource)\n          if Ressource.objects.filter(titre = titre.capitalize(), description = description.capitalize(), contenu = contenu):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "download_file",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def download_file(request, code):\n    uploaded_file = get_object_or_404(Ressource, pk=code)\n    file_path = os.path.join(settings.MEDIA_ROOT, uploaded_file.contenu.name)\n    if os.path.exists(file_path):\n        with open(file_path, 'rb') as f:\n            response = HttpResponse(f.read(), content_type='application/pdf')\n            response['Content-Disposition'] = f'attachment; filename={uploaded_file.contenu.name}'\n            return response\n    raise Http404(\"File does not exist\")\n# =======================================================================================================",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "module_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def module_enseignant(request):\n    try:\n        module = Module.objects.all()\n        niveau = Niveau.objects.all()\n        ressource = Ressource.objects.all()\n        context = {'modules': module, 'niveaux':niveau, 'ressources':ressource}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        return redirect('module_enseignant')\n    return render(request,'enseignant/module.html', context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertModule",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertModule(request):\n    try:\n      if request.method == \"POST\":\n        titre = request.POST.get(\"titre\")\n        description = request.POST.get(\"description\")\n        prix = request.POST.get(\"prix\")\n        id_niveau = request.POST.get(\"niveau\")\n        id_ressource = request.POST.get(\"ressource\")\n        niveau = get_object_or_404(Niveau, pk = id_niveau)\n        ressource = get_object_or_404(Ressource, pk = id_ressource)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateModule",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateModule(request):\n    try:\n      if request.method == \"POST\":\n            code = request.POST.get(\"code\")\n            titre = request.POST.get(\"titre\")\n            description = request.POST.get(\"description\")\n            prix = request.POST.get(\"prix\")\n            id_niveau = request.POST.get(\"niveau\")\n            id_ressource = request.POST.get(\"ressource\")\n            niveau = get_object_or_404(Niveau, pk = id_niveau)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "formation_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def formation_admin(request):\n    try:\n      formation = Formation.objects.all()\n      module = Module.objects.all()\n      enseignant = Enseignant.objects.all()\n      domaine = Domaine.objects.all()\n      context = {'formations':formation, 'enseignants':enseignant, 'modules':module, 'domaines':domaine}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        return redirect('formation_admin') ",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertFormation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertFormation(request):\n    try:\n      if request.method == \"POST\":\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          duree = request.POST.get(\"duree\")\n          date_debut = request.POST.get(\"date_debut\")\n          date_fin = request.POST.get(\"date_fin\")\n          id_domaine = request.POST.get(\"domaine\")\n          id_module = request.POST.get(\"module\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateFormation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateFormation(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          duree = request.POST.get(\"duree\")\n          date_debut = request.POST.get(\"date_debut\")\n          date_fin = request.POST.get(\"date_fin\")\n          id_domaine = request.POST.get(\"domaine\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertModalitePaie",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertModalitePaie(request):\n    try:\n      if request.method == \"POST\":\n          tranche = request.POST.get(\"tranche\")\n          id_module = request.POST.get(\"module\")\n          module = get_object_or_404(Module, pk = id_module)\n          if tranche == \"Une Tranche\":\n            montant_fixe = module.prix\n          elif tranche == \"Deux Tranches\":\n            montant_fixe = module.prix/2",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateModalitePaie",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateModalitePaie(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          tranche = request.POST.get(\"tranche\")\n          montant_fixe = request.POST.get(\"montant_fixe\")\n          id_module = request.POST.get(\"module\")\n          module = get_object_or_404(Module, pk = id_module)\n          ModalitePaie(\n              code = code,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "inscription_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def inscription_admin(request):\n    try:\n      inscription = Inscription.objects.all()\n      apprenant = Apprenant.objects.all()\n      formation = Formation.objects.all()\n      modalite = ModalitePaie.objects.all()\n      context = {'inscriptions':inscription, 'apprenants':apprenant, 'modalites':modalite, 'formations':formation}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n      return redirect('inscription_admin')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertInscription",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertInscription(request):\n    try:\n      if request.method == \"POST\":\n          id_apprenant = request.POST.get(\"apprenant\")\n          # id_formation = request.POST.get(\"formation\")\n          id_modalite = request.POST.get(\"modalite\")\n          date_inscription = request.POST.get(\"date_inscription\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          # formation = get_object_or_404(Formation, pk = id_formation)\n          modalite = get_object_or_404(ModalitePaie, pk = id_modalite)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateInscription",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateInscription(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          id_apprenant = request.POST.get(\"apprenant\")\n          id_formation = request.POST.get(\"formation\")\n          id_modalite = request.POST.get(\"modalite\")\n          date_inscription = request.POST.get(\"date_inscription\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          formation = get_object_or_404(Formation, pk = id_formation)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "evaluation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def evaluation(request):\n    try:\n        evaluation = Evaluation.objects.all()\n        formation = Formation.objects.all()\n        context = {'evaluations':evaluation, 'formations':formation}\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n        return redirect('evaluation')    \n    return render(request, \"enseignant/interrogation.html\", context)\ndef insertEvaluation(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertEvaluation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertEvaluation(request):\n    try:\n      if request.method == \"POST\":\n          id_formation = request.POST.get(\"formation\")\n          maximum = request.POST.get(\"maximum\")\n          cote = request.POST.get(\"cote\")\n          date_evaluation = request.POST.get(\"date_evaluation\")\n          formation = get_object_or_404(Formation, pk = id_formation)\n          Evaluation.objects.create(\n              formation = formation,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateEvaluation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateEvaluation(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          id_formation = request.POST.get(\"formation\")\n          maximum = request.POST.get(\"maximum\")\n          cote = request.POST.get(\"cote\")\n          date_evaluation = request.POST.get(\"date_evaluation\")\n          formation = get_object_or_404(Formation, pk = id_formation)\n          Evaluation(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "publication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def publication(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'posts':posts}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"publications.html\", context)\ndef comment_post(request, post_id):\n    try:\n        post = get_object_or_404(Publication, code=post_id)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "comment_post",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def comment_post(request, post_id):\n    try:\n        post = get_object_or_404(Publication, code=post_id)\n        if request.method == \"POST\" and request.user.is_authenticated:\n            content = request.POST.get('content')\n            Commentaire.objects.create(publication=post, user=request.user, content=content)\n    except Exception as e:\n              messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return HttpResponseRedirect(reverse('publication_apprenant'))\ndef popular_posts(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "popular_posts",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def popular_posts(request):\n    try:\n        posts = Publication.objects.annotate(like_count=models.Count('likes')).order_by('-like_count')\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, 'publications_populaires.html', {'posts': posts})\ndef like_post(request, post_id):\n    try:\n        post = get_object_or_404(Publication, code=post_id)\n        if request.user.is_authenticated:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "like_post",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def like_post(request, post_id):\n    try:\n        post = get_object_or_404(Publication, code=post_id)\n        if request.user.is_authenticated:\n            like, created = Like.objects.get_or_create(publication=post, user=request.user)\n            if not created:\n                like.delete()  # Si l'utilisateur a déjà liké, on supprime le like\n    except Exception as e:\n        messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return HttpResponseRedirect(reverse('publication_apprenant'))",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "publication_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def publication_admin(request):\n    try:\n        publication = Publication.objects.all()\n        context = {'publications':publication}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'admin/publier.html', context)\ndef insertPublication(request):\n    try:\n      if request.method == \"POST\":",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertPublication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertPublication(request):\n    try:\n      if request.method == \"POST\":\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          date_publication = request.POST.get(\"date_publication\")\n          # compte_utilisateur = CompteUtilisateur.objects.filter()\n          if Publication.objects.filter(titre = titre.capitalize(), description = description.capitalize(), user = request.user.id):\n            messages.warning(\"Ces informations existent déjà !\")\n            return redirect('publication_admin')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updatePublication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updatePublication(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          id_compte_utilisateur = request.POST.get(\"compte_utilisateur\")\n          date_publication = request.POST.get(\"date_publication\")\n          compte_utilisateur = get_object_or_404(CompteUtilisateur, pk = id_compte_utilisateur)\n          if Publication.objects.filter(titre = titre.capitalize(), description = description.capitalize(), compte_utilisateur = compte_utilisateur):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "publication_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def publication_enseignant(request):\n    try:\n        publication = Publication.objects.all()\n        context = {'publications':publication}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'enseignant/publier.html', context)\ndef insertPublicationEnseignant(request):\n    try:\n      if request.method == \"POST\":",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertPublicationEnseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertPublicationEnseignant(request):\n    try:\n      if request.method == \"POST\":\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          date_publication = request.POST.get(\"date_publication\")\n          # compte_utilisateur = CompteUtilisateur.objects.filter()\n          if Publication.objects.filter(titre = titre.capitalize(), description = description.capitalize(), user = request.user.id):\n            messages.warning(\"Ces informations existent déjà !\")\n            return redirect('publication_enseignant')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updatePublicationEnseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updatePublicationEnseignant(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          titre = request.POST.get(\"titre\")\n          description = request.POST.get(\"description\")\n          id_compte_utilisateur = request.POST.get(\"compte_utilisateur\")\n          date_publication = request.POST.get(\"date_publication\")\n          compte_utilisateur = get_object_or_404(CompteUtilisateur, pk = id_compte_utilisateur)\n          if Publication.objects.filter(titre = titre.capitalize(), description = description.capitalize(), compte_utilisateur = compte_utilisateur):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertPaiement",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertPaiement(request):\n    try:\n      if request.method == \"POST\":\n          id_apprenant = request.POST.get(\"apprenant\")\n          id_module = request.POST.get(\"module\")\n          montant = request.POST.get(\"montant\")\n          date_paiement = request.POST.get(\"date_paiement\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          module = get_object_or_404(Module, pk = id_module)\n          Paiement.objects.create(",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updatePaiement",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updatePaiement(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          id_apprenant = request.POST.get(\"apprenant\")\n          id_module = request.POST.get(\"module\")\n          montant = request.POST.get(\"montant\")\n          date_paiement = request.POST.get(\"date_paiement\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          module = get_object_or_404(Module, pk = id_module)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertQuestionnaire",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertQuestionnaire(request):\n    try:\n        modules = Module.objects.all()\n        questionnaire = Questionnaire.objects.all()\n        if request.method == \"POST\":\n            module_id = request.POST.getlist('module')\n            questions = request.POST.getlist('question')\n            responses = request.POST.getlist('reponse')\n            if Questionnaire.objects.filter(module = module, question = question.capitalize(), reponse = reponse.capitalize()):\n                  messages.warning(request, \"Ces informations existent déjà !\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "add_questionnaire",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def add_questionnaire(request):\n    try:\n        if request.method == \"POST\":\n            formation_id = request.POST.getlist('formation')\n            questions = request.POST.getlist('question')\n            responses = request.POST.getlist('reponse')\n            for i in range(len(questions)):\n                Questionnaire.objects.create(\n                    formation_id=formation_id[i],\n                    question=questions[i].capitalize(),",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "updateQuestionnaire",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def updateQuestionnaire(request):\n    try:\n      if request.method == \"POST\":\n          code = request.POST.get(\"code\")\n          id_module = request.POST.get(\"module\")\n          question = request.POST.get(\"question\")\n          reponse = request.POST.get(\"reponse\")\n          module = get_object_or_404(Module, pk = id_module)\n          if Questionnaire.objects.filter(module = module, question = question.capitalize(), reponse = reponse.capitalize()):\n              messages.warning(\"Ces informations existent déjà !\")",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "insertTest",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def insertTest(request):\n    try:\n      if request.method == \"POST\":\n          id_apprenant = request.POST.get(\"id_apprenant\")\n          id_questionnaire = request.POST.get(\"id_questionnaire\")\n          reponse = request.POST.get(\"reponse\")\n          apprenant = get_object_or_404(Apprenant, pk = id_apprenant)\n          questionnaire = get_object_or_404(Questionnaire, pk = id_questionnaire)\n          Test.objects.create(\n              apprenant = apprenant,",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichageModule",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichageModule(request):\n    return render(request,'apprenant/module.html')\n# ============================= Affichage formation dans Apprenant=================\ndef affichageFormationApprenant(request):\n    return render(request,'apprenant/formation.html')\n# ============================ Affichage evaluation dans Apprenant=================\ndef affichageEvaluation(request):\n    return render(request,'apprenant/evaluation.html')\n# =========================== Affichage publication dans Apprenant=================\ndef affichagePublication(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichageFormationApprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichageFormationApprenant(request):\n    return render(request,'apprenant/formation.html')\n# ============================ Affichage evaluation dans Apprenant=================\ndef affichageEvaluation(request):\n    return render(request,'apprenant/evaluation.html')\n# =========================== Affichage publication dans Apprenant=================\ndef affichagePublication(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'posts':posts}",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichageEvaluation",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichageEvaluation(request):\n    return render(request,'apprenant/evaluation.html')\n# =========================== Affichage publication dans Apprenant=================\ndef affichagePublication(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'posts':posts}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'apprenant/publication.html',context)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichagePublication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichagePublication(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'posts':posts}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request,'apprenant/publication.html',context)\n# ============================= Affichage sous chapitre dans Apprenant=================\ndef sous_chapitre_apprenant(request):\n    return render(request,'apprenant/souschapitre.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "sous_chapitre_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def sous_chapitre_apprenant(request):\n    return render(request,'apprenant/souschapitre.html')\n# ============================= Affichage chapitre dans Apprenant=================\ndef chapitre_apprenant(request):\n    return render(request,'apprenant/chapitre.html')\n# ============================== Partie Enseignant ================================\n# ============================= Affichage Apprenant dans Enseignant===================\ndef affichageApprenant(request):\n    return render(request,'enseignant/listeApprenant.html')\n# ============================= Affichage formation dans Enseignant=================",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "chapitre_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def chapitre_apprenant(request):\n    return render(request,'apprenant/chapitre.html')\n# ============================== Partie Enseignant ================================\n# ============================= Affichage Apprenant dans Enseignant===================\ndef affichageApprenant(request):\n    return render(request,'enseignant/listeApprenant.html')\n# ============================= Affichage formation dans Enseignant=================\ndef affichageFormationEnseignant(request):\n    return render(request,'enseignant/formation.html')\n# ============================= Affichage sous chapitre dans Enseignant=================",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichageApprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichageApprenant(request):\n    return render(request,'enseignant/listeApprenant.html')\n# ============================= Affichage formation dans Enseignant=================\ndef affichageFormationEnseignant(request):\n    return render(request,'enseignant/formation.html')\n# ============================= Affichage sous chapitre dans Enseignant=================\ndef sous_chapitre_enseignant(request):\n    return render(request,'enseignant/souschapitre.html')\n# ============================= Affichage chapitre dans Enseignant=================\ndef chapitre_enseignant(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "affichageFormationEnseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def affichageFormationEnseignant(request):\n    return render(request,'enseignant/formation.html')\n# ============================= Affichage sous chapitre dans Enseignant=================\ndef sous_chapitre_enseignant(request):\n    return render(request,'enseignant/souschapitre.html')\n# ============================= Affichage chapitre dans Enseignant=================\ndef chapitre_enseignant(request):\n    return render(request,'enseignant/chapitre.html')\n# =========================== Admin & Type de publications ============================\ndef typePublication(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "sous_chapitre_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def sous_chapitre_enseignant(request):\n    return render(request,'enseignant/souschapitre.html')\n# ============================= Affichage chapitre dans Enseignant=================\ndef chapitre_enseignant(request):\n    return render(request,'enseignant/chapitre.html')\n# =========================== Admin & Type de publications ============================\ndef typePublication(request):\n    return render(request,'admin/typepublication.html')\n# =====================================================================================================================\n# TESTER SI APPRENANT A UN TEST A PASSER",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "chapitre_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def chapitre_enseignant(request):\n    return render(request,'enseignant/chapitre.html')\n# =========================== Admin & Type de publications ============================\ndef typePublication(request):\n    return render(request,'admin/typepublication.html')\n# =====================================================================================================================\n# TESTER SI APPRENANT A UN TEST A PASSER\n# =====================================================================================================================\ndef rediriger_apprenant(request):\n    user = request.user  # L'utilisateur actuellement connecté",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "typePublication",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def typePublication(request):\n    return render(request,'admin/typepublication.html')\n# =====================================================================================================================\n# TESTER SI APPRENANT A UN TEST A PASSER\n# =====================================================================================================================\ndef rediriger_apprenant(request):\n    user = request.user  # L'utilisateur actuellement connecté\n    # Vérifiez si l'utilisateur est un apprenant\n    if user.apprenant:\n        apprenant = user.apprenant",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "rediriger_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def rediriger_apprenant(request):\n    user = request.user  # L'utilisateur actuellement connecté\n    # Vérifiez si l'utilisateur est un apprenant\n    if user.apprenant:\n        apprenant = user.apprenant\n        # Vérifiez si l'apprenant est inscrit\n        inscription = Inscription.objects.filter(apprenant=apprenant).last()\n        if inscription:\n            # Vérifiez si la formation est nulle dans l'inscription\n            if inscription.formation is None:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "tester_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def tester_apprenant(request):\n    try:\n      formation = Formation.objects.all()\n      context = {'formations':formation}\n    except:\n      print('An exception occurred')\n    return render(request,'apprenant/pretestis.html', context)\ndef prendre_test(request, formation_id, question_index=0):\n    # Récupérer la formation spécifique\n    formation = get_object_or_404(Formation, code=formation_id)",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "prendre_test",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def prendre_test(request, formation_id, question_index=0):\n    # Récupérer la formation spécifique\n    formation = get_object_or_404(Formation, code=formation_id)\n    # Filtrer les questions par formation\n    questions = Questionnaire.objects.filter(formation=formation)\n    if question_index >= len(questions):\n        # Si toutes les questions ont été répondues, rediriger vers une page de succès ou de résultats\n        return redirect('test_termine')\n    question_actuelle = questions[question_index]\n    if request.method == \"POST\":",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "test_termine",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def test_termine(request):\n    return render(request, 'test_complete.html')\ndef demo_test(request):\n    return render(request, 'apprenant/demoTest.html')\n# ========================================view test =================================\ndef test_app(request):\n    return render(request,'apprenant/testApp.html')\ndef publicationApprenant(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "demo_test",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def demo_test(request):\n    return render(request, 'apprenant/demoTest.html')\n# ========================================view test =================================\ndef test_app(request):\n    return render(request,'apprenant/testApp.html')\ndef publicationApprenant(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'posts':posts}\n    except Exception as e:",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "test_app",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def test_app(request):\n    return render(request,'apprenant/testApp.html')\ndef publicationApprenant(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'posts':posts}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"apprenant/publication.html\", context)\ndef allPublicationAdmin(request):",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "publicationApprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def publicationApprenant(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'posts':posts}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"apprenant/publication.html\", context)\ndef allPublicationAdmin(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "allPublicationAdmin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def allPublicationAdmin(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'posts':posts}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"admin/publication.html\", context)\ndef allPublicationEnseignant(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "allPublicationEnseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def allPublicationEnseignant(request):\n    try:\n        posts = Publication.objects.all().order_by('-date_publication')\n        context = {'posts':posts}\n    except Exception as e:\n      messages.error(request, f\"Une erreur s'est produite lors de l'exécution : {str(e)} \\n Actualisez la page !\")\n    return render(request, \"enseignant/publication.html\", context)\n# ============================ PROFILE USER=====================================\ndef profile_admin(request):\n    return render(request,'profile.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "profile_admin",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def profile_admin(request):\n    return render(request,'profile.html')\ndef profile_enseignant(request):\n    return render(request,'enseignant/profile.html')\ndef profile_apprenant(request):\n    return render(request,'apprenant/profile.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "profile_enseignant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def profile_enseignant(request):\n    return render(request,'enseignant/profile.html')\ndef profile_apprenant(request):\n    return render(request,'apprenant/profile.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "profile_apprenant",
        "kind": 2,
        "importPath": "eScholar.views",
        "description": "eScholar.views",
        "peekOfCode": "def profile_apprenant(request):\n    return render(request,'apprenant/profile.html')",
        "detail": "eScholar.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "learning_platform.asgi",
        "description": "learning_platform.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "learning_platform.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-yqccmbzz&$ojuu(#_axkgf!c1uukvqe5ouocjtx5$&@#)!m8%i'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-yqccmbzz&$ojuu(#_axkgf!c1uukvqe5ouocjtx5$&@#)!m8%i'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'eScholar',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'eScholar',\n]\nMIDDLEWARE = [",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'learning_platform.urls'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "ROOT_URLCONF = 'learning_platform.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [ BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [ BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "WSGI_APPLICATION = 'learning_platform.wsgi.application'\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'eScholar_db',\n        'USER': 'root',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'eScholar_db',\n        'USER': 'root',\n        'PASSWORD': '',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'eScholar_db',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': 'localhost',",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'eScholar_db',\n        'USER': 'root',\n        'PASSWORD': '',\n        'HOST': 'localhost',\n        'PORT': '3306',\n    }\n}",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "LANGUAGE_CODE = 'fr-fr'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\n# Default primary key field type",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "MEDIA_URL = '/images/'\nMEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'images'\nAUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'eScholar.CompteUtilisateur'\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "learning_platform.settings",
        "description": "learning_platform.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "learning_platform.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "learning_platform.urls",
        "description": "learning_platform.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('eScholar.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "learning_platform.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "learning_platform.wsgi",
        "description": "learning_platform.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "learning_platform.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'learning_platform.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]